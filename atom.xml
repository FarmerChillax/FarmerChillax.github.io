<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Farmer</title>
  <icon>https://blog.farmer233.top/favicon.png</icon>
  <subtitle>-Farmer的自习室</subtitle>
  <link href="https://blog.farmer233.top/atom.xml" rel="self"/>
  
  <link href="https://blog.farmer233.top/"/>
  <updated>2021-07-17T14:39:36.117Z</updated>
  <id>https://blog.farmer233.top/</id>
  
  <author>
    <name>-Farmer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Leetcode]合并两个有序数组</title>
    <link href="https://blog.farmer233.top/2021/07/17/Leetcode-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://blog.farmer233.top/2021/07/17/Leetcode-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-17T13:58:31.000Z</published>
    <updated>2021-07-17T14:39:36.117Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode数据结构题目集的第二题🎉🎈<br>这次分别是“合并两个有序数组”和“两数之和”，由于两数之和之前已经做过了这里就不再赘述了。</p><a id="more"></a><h2 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h2><blockquote><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。<br>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p></blockquote><p>示例 1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h2 id="解题思路-amp-题解"><a href="#解题思路-amp-题解" class="headerlink" title="解题思路&amp;题解"></a>解题思路&amp;题解</h2><p>已知m, n为nums1, nums2的元素数量且nums1的空间大小等于 m + n，也就是说通过切片 我们能拿到nums1实际需要的元素内容。<br>由于nums1的空间大小足够我们合并，因此可以直接将nums2的内容直接添加到nums1数组的m - 1后面，然后再对合并后的数组进行排序则得到了题解。<br>代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="keyword">int</span>, m <span class="keyword">int</span>, nums2 []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    nums1 = <span class="built_in">append</span>(nums1[:m], nums2...)</span><br><span class="line">    sort.Ints(nums1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h2><p>官方的第一个解法其实就是我上面的解法，此外还有一个解法是我没有想出来的，看完后加上个人理解复现一下。</p><p>这里放一张leetcode官方的动图，直观的看到原理。</p><img src="/2021/07/17/Leetcode-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/1.gif" class="" title="doubelePoint"><p>原理：利用两个point变量来模拟指针，数组看成一个队列 当其中一个队列遍历完后退出循环。代码中有详细的注释辅助理解。<br>代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="keyword">int</span>, m <span class="keyword">int</span>, nums2 []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 存放结果</span></span><br><span class="line">res := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, m+n)</span><br><span class="line"><span class="comment">// 两个数组的指针</span></span><br><span class="line">point1, point2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 数组一循环完, 将数组二剩余元素添加到结果里面</span></span><br><span class="line"><span class="keyword">if</span> point1 == m &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, nums2[point2:]...)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与上面同理</span></span><br><span class="line"><span class="keyword">if</span> point2 == n &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, nums1[point1:]...)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 比较两个队列头的值，将小的放入结果数组中</span></span><br><span class="line"><span class="keyword">if</span> nums1[point1] &lt; nums2[point2] &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, nums1[point1])</span><br><span class="line">point1++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, nums2[point2])</span><br><span class="line">point2++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 不太清楚leetcode的判题程序，这里无法改变nums1的引用，因此使用copy复制。</span></span><br><span class="line">    <span class="comment">// nums1 = res</span></span><br><span class="line">    <span class="built_in">copy</span>(nums1, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode数据结构题目集的第二题🎉🎈&lt;br&gt;这次分别是“合并两个有序数组”和“两数之和”，由于两数之和之前已经做过了这里就不再赘述了。&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.farmer233.top/tags/leetcode/"/>
    
    <category term="算法和数据结构" scheme="https://blog.farmer233.top/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Golang" scheme="https://blog.farmer233.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode]存在重复元素&amp;最大子序和</title>
    <link href="https://blog.farmer233.top/2021/07/16/Leetcode-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>https://blog.farmer233.top/2021/07/16/Leetcode-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</id>
    <published>2021-07-16T09:41:16.000Z</published>
    <updated>2021-07-16T10:16:12.692Z</updated>
    
    <content type="html"><![CDATA[<p>这次刷的是leetcode的14天数据结构题目集，这是第一天的题目集✨🎉<br>最近在看王道的数据结构和《小灰漫画算法》，顺便练习一下Golang。</p><a id="more"></a><h2 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h2><blockquote><p>给定一个整数数组，判断是否存在重复元素。<br>如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p></blockquote><p>Example1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>Example2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>Example3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h3 id="解题思路-amp-题解"><a href="#解题思路-amp-题解" class="headerlink" title="解题思路&amp;题解"></a>解题思路&amp;题解</h3><p>已知数组是一个整型数组，故我们可以对数组进行排序，然后遍历数组。<br>通过判断相邻两个元素是否相等，从而判断数组是否有重复元素。</p><p>题解如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><blockquote><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p></blockquote><p>Example1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p>Example2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>Example3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>Example4:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p>Example5:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-100000]</span><br><span class="line">输出：-100000</span><br></pre></td></tr></table></figure><h3 id="解题思路-amp-题解-1"><a href="#解题思路-amp-题解-1" class="headerlink" title="解题思路&amp;题解"></a>解题思路&amp;题解</h3><p>这道题可以说是浙大数据结构讲的 <strong>最大子列和</strong> 问题的变形，第一时间想到的是在线处理。<br>但这里需要注意<strong>输入的内容可以是负的</strong>，因此将原本的在线处理稍微变形。for循环的时候将已经遍历的元素累加起来，如果<strong>当前元素和累加结果相加大于当前元素</strong></span>（<code>nums[i - 1] + nums[i] &gt; nums[i]</code>）则证明改子列不会变小，然后再和最大值进行比较。</p><p>题解如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">max := nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i - <span class="number">1</span>] + nums[i] &gt; nums[i])&#123;</span><br><span class="line">            nums[i] += nums[i - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; max) &#123;</span><br><span class="line">            max = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次刷的是leetcode的14天数据结构题目集，这是第一天的题目集✨🎉&lt;br&gt;最近在看王道的数据结构和《小灰漫画算法》，顺便练习一下Golang。&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.farmer233.top/tags/leetcode/"/>
    
    <category term="算法和数据结构" scheme="https://blog.farmer233.top/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Golang" scheme="https://blog.farmer233.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>初探Typescript-使用http模块的简易爬虫</title>
    <link href="https://blog.farmer233.top/2021/03/12/%E5%88%9D%E6%8E%A2Typescript-%E4%BD%BF%E7%94%A8http%E6%A8%A1%E5%9D%97%E7%9A%84%E7%AE%80%E6%98%93%E7%88%AC%E8%99%AB/"/>
    <id>https://blog.farmer233.top/2021/03/12/%E5%88%9D%E6%8E%A2Typescript-%E4%BD%BF%E7%94%A8http%E6%A8%A1%E5%9D%97%E7%9A%84%E7%AE%80%E6%98%93%E7%88%AC%E8%99%AB/</id>
    <published>2021-03-12T11:45:30.000Z</published>
    <updated>2021-03-12T12:24:05.482Z</updated>
    
    <content type="html"><![CDATA[<p>这两天hxd找我写一道面试题，要求使用typescript<br>typescript是JavaScript的一个超集，它具有<strong>类型系统</strong>并且可以编译成普通的JavaScript代码。   </p><h2 id="1-从多个网页爬取内容，然后进行解析"><a href="#1-从多个网页爬取内容，然后进行解析" class="headerlink" title="1. 从多个网页爬取内容，然后进行解析"></a>1. 从多个网页爬取内容，然后进行解析</h2><p>有10个网页，1.txt 到 10.txt</p><p><a href="http://dy-public.oss-cn-shenzhen.aliyuncs.com/interviewTestData/1.txt" target="_blank" rel="noopener">http://dy-public.oss-cn-shenzhen.aliyuncs.com/interviewTestData/1.txt</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abc</span>&gt;</span> <span class="tag">&lt;<span class="name">de</span></span></span><br><span class="line"><span class="tag"><span class="attr">f</span>&gt;</span>data : 1992; name : agent 1 <span class="tag">&lt;/<span class="name">def</span>&gt;</span><span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="0"><li>格式有可能有区别</li><li>用 promise, async, await 分别实现并发、串行爬取</li><li>网页下载使用nodejs的http即可</li><li>使用正则表达式获取data后面的字段，将10个文件的data值全部获取，并相加</li></ol><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>Node.js 有大量的网络请求模块，题目这里要求用node的http模块<br>http模块是node自带的，使用起来十分简单，代码如下:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.get(url, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).on(<span class="string">'error'</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(e.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>http模块还可以指定options，但这里只需要下载网页，因此使用简单的get请求足以。  </p><h2 id="爬虫主体"><a href="#爬虫主体" class="headerlink" title="爬虫主体"></a>爬虫主体</h2><p>爬虫大致分为两部分-&gt; <strong>网络请求</strong>和 <strong>数据清理</strong>, 网络请求已经实现了，剩下就是把请求回来的数据进行清理了。这里也没啥多的选择，题目要求使用正则表达式，简单的构建整理一下就得到了下面的代码:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> http <span class="keyword">from</span> <span class="string">'http'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Spider &#123;</span><br><span class="line">    sum: <span class="built_in">Number</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    httpGet(url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            http.get(url, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                res.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">                res.on(<span class="string">'data'</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve(data)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).on(<span class="string">'error'</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(e.message)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render(urls) &#123;</span><br><span class="line">        urls.reduce(<span class="function">(<span class="params">promise, url</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> promise.then(_ =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.httpGet(url)</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.flush(node)</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sum += res</span><br><span class="line">            &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">        &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line">    &#125;</span><br><span class="line">    flush(data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> re = <span class="regexp">/:\s(\d+?);/gi</span></span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">number</span> = <span class="built_in">Number</span>(re.exec(<span class="built_in">String</span>(data))[<span class="number">1</span>])</span><br><span class="line">            resolve(<span class="built_in">number</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baseUrl = <span class="string">'http://dy-public.oss-cn-shenzhen.aliyuncs.com/interviewTestData/'</span></span><br><span class="line"><span class="keyword">let</span> urlList = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">1</span>; index &lt;= <span class="number">10</span>; index++) &#123;</span><br><span class="line">    urlList.push(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span><span class="subst">$&#123;index&#125;</span>.txt`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spider = <span class="keyword">new</span> Spider()</span><br><span class="line">spider.render(urlList)</span><br><span class="line"><span class="comment">// 模拟等待微队列运行完成， 可以用await语法糖</span></span><br><span class="line"><span class="comment">// 这里只是写个大题的框架罢了，后面根据具体的要求改动</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(spider.sum)</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>到此为止，整个爬虫就写完了，总结一下体验。typescript是具有类型系统，这对于我这写多了python和JavaScript的人来说太好上手了！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天hxd找我写一道面试题，要求使用typescript&lt;br&gt;typescript是JavaScript的一个超集，它具有&lt;strong&gt;类型系统&lt;/strong&gt;并且可以编译成普通的JavaScript代码。   &lt;/p&gt;
&lt;h2 id=&quot;1-从多个网页爬取内容，然后</summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="web" scheme="https://blog.farmer233.top/tags/web/"/>
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="TypeScript" scheme="https://blog.farmer233.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>简单看看JavaScript中的Promise</title>
    <link href="https://blog.farmer233.top/2021/02/08/%E7%AE%80%E5%8D%95%E7%9C%8B%E7%9C%8BJavaScript%E4%B8%AD%E7%9A%84Promise/"/>
    <id>https://blog.farmer233.top/2021/02/08/%E7%AE%80%E5%8D%95%E7%9C%8B%E7%9C%8BJavaScript%E4%B8%AD%E7%9A%84Promise/</id>
    <published>2021-02-08T07:49:23.000Z</published>
    <updated>2021-02-08T09:02:22.007Z</updated>
    
    <content type="html"><![CDATA[<p>谈到JavaScript相信它的事件回调大家肯定都听过。即使只有一个执行线程，它也能处理异步高并发。<br>同样很多人回调写多了都不可避免的会变成<strong>Callback Hell(回调地狱)</strong>，这样的代码会非常复杂难懂，因为回调不像同步代码，它的执行顺序不是从上至下的，读回调代码必须反复横跳，思考什么情况下回跳到什么地方。<br>Promise就是一种异步编程，很早就有了随着ES6的发布Promise也成了JavaScript原生支持的对象,但学校这学期的课程并没有相关章节。因此顺便学习下Promise对象的使用。</p><p>以JavaScript原生的AJAX为栗子，AJAX的请求形式如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">    xhr.send()</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">            callback(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"加载失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就以此方式依次请求三个接口(地址)，假设响应体的JSON格式是<code>{id: 1, name: &quot;farmer&quot;}</code>, JS代码如下:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ajax(<span class="string">'http://127.0.0.1:5003/?name=farmer'</span>, (user) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 先拿到一个东西，再用这个东西去查别的，比如通过用户名查该用户的资料</span></span><br><span class="line">    ajax(<span class="string">'http://127.0.0.1:5003/?name='</span> + user.name, (e) =&gt; &#123;</span><br><span class="line">        ajax(<span class="string">'http://127.0.0.1:5003/?name='</span> + user.name, (e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>是不是觉得嵌套很多？ 如果连续请求更多的地址，那嵌套就要看傻了。 接下来我们试试用Promise对象对ajax进行封装，看看效果怎么样。 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">        xhr.send()</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">"加载失败"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们自己封装的AJAX会返回一个“Promise”对象，初始化该对象时我们要传入一个函数，这个函数又接受两个回调函数作为参数，分别是<code>resolve</code>和<code>reject</code>。<code>resolve</code>就是你操作成功时调用的方法，<code>reject</code>就是失败时调用的。接下来让我们同样实现前面三个接口的功能:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">"http://127.0.0.1:5003/"</span></span><br><span class="line">ajax(<span class="string">`<span class="subst">$&#123;url&#125;</span>?name=xiaotao`</span>).then(</span><br><span class="line">    value =&gt;&#123;</span><br><span class="line">        <span class="comment">// 这里可以通过第一个数据再发送请求</span></span><br><span class="line">        <span class="keyword">return</span> ajax(<span class="string">`<span class="subst">$&#123;url&#125;</span>?name=`</span> + value.name)</span><br><span class="line">    &#125;</span><br><span class="line">).then(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ajax(<span class="string">`<span class="subst">$&#123;url&#125;</span>?name=`</span> + value.name)</span><br><span class="line">&#125;).then(</span><br><span class="line">    value =&gt; <span class="built_in">console</span>.log(value),</span><br><span class="line">    reason =&gt; <span class="built_in">console</span>.log(reason)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>大家是不是发现，本来长长的嵌套，变成了顺序执行的代码了？ 到此就是Promise的简单探讨了。 如果你对上面的栗子还不太清楚，那下面是一些Promise对象更基础、详细的解释or栗子。希望能帮到你~😃</p><h2 id="Promise怎么用？"><a href="#Promise怎么用？" class="headerlink" title="Promise怎么用？"></a>Promise怎么用？</h2><p>相信刚接触Promise的童鞋都比较迷惑，到底应该怎么用Promise。其实上面有提到过，初始化该对象时我们要传入一个函数(我这里使用的是匿名函数)，这个函数又接受两个回调函数作为参数(这里读起来比较拗口，可以和下面的栗子结合起来看)，分别是<code>resolve</code>和<code>reject</code>。<code>resolve</code>就是你操作成功时调用的方法，<code>reject</code>就是失败时调用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolved 成功</span></span><br><span class="line"><span class="comment">// rejected 拒绝</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 工作流程</span></span><br><span class="line">    resolve(<span class="string">"成功状态"</span>)</span><br><span class="line">    <span class="comment">// reject("失败状态")</span></span><br><span class="line">&#125;).then( <span class="comment">// then -&gt; 微任务列表</span></span><br><span class="line">    <span class="comment">// 工作后的处理</span></span><br><span class="line">    <span class="comment">// then方法有两个参数，第一个是成功的回调函数，第二个是失败的</span></span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"成功业务处理-1"</span>)</span><br><span class="line">    &#125;, </span><br><span class="line">    reason =&gt; &#123;</span><br><span class="line">        <span class="comment">// 失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'失败(拒绝)的业务处理-1'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">).then(</span><br><span class="line">    value =&gt; <span class="built_in">console</span>.log(<span class="string">"成功业务处理-2"</span>),</span><br><span class="line">    reason =&gt; <span class="built_in">console</span>.log(<span class="string">'失败(拒绝)的业务处理-2'</span>)</span><br><span class="line">    <span class="comment">// 上面一个Then可能不太清晰，这里和上面的逻辑是一样的。</span></span><br><span class="line">    <span class="comment">// then有两个参数，这两个参数是两个回调函数。</span></span><br><span class="line">    <span class="comment">// 一个是成功状态的回调函数，对应这里的value。 而这个成功状态则是上面的resolve</span></span><br><span class="line">    <span class="comment">// 一个是失败状态的回调函数，对应这里的reason。而这个失败状态则是上面的reject</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Then的更多用法"><a href="#Then的更多用法" class="headerlink" title="Then的更多用法"></a>Then的更多用法</h2><p>我们从上面的栗子可以看到，then函数也有两个参数，也是一个成功一个失败。其实then也是一个Promise。<br>但从上面的栗子也可以发现，第二个then无论前一个then是哪个参数处理的，都只会出发成功状态。如果我们想让第二个then的失败处理也能生效，我们应该将代码改成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'fulfilled'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">        <span class="comment">// 第一个Then return的内容, Then默认返回成功(resolve)</span></span><br><span class="line">        <span class="comment">// return 'Farmer'</span></span><br><span class="line">        <span class="comment">// 返回一个Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// resolve("解决")</span></span><br><span class="line">            reject(<span class="string">"Then 解决失败"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    reason =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(reason)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// resolve("解决")</span></span><br><span class="line">                    reject(<span class="string">"Then 解决失败"</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">).then(</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    reason =&gt; <span class="built_in">console</span>.log(reason)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当第一个then返回一个Promise对象后，第二个then就能根据前一个then返回的Promise的状态进行处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于Promise一些更深层次的理论这里就不探讨了，网上资料很多，大家可以去搜索下。本文中的示例代码可以在<a href="https://gitee.com/Farmer-chong/my-codes/tree/master/PromiseLearn" target="_blank" rel="noopener">这里下载</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谈到JavaScript相信它的事件回调大家肯定都听过。即使只有一个执行线程，它也能处理异步高并发。&lt;br&gt;同样很多人回调写多了都不可避免的会变成&lt;strong&gt;Callback Hell(回调地狱)&lt;/strong&gt;，这样的代码会非常复杂难懂，因为回调不像同步代码，它的执</summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="web" scheme="https://blog.farmer233.top/tags/web/"/>
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端 | Skeleton骨架屏</title>
    <link href="https://blog.farmer233.top/2021/01/12/%E5%89%8D%E7%AB%AF-Skeleton%E9%AA%A8%E6%9E%B6%E5%B1%8F/"/>
    <id>https://blog.farmer233.top/2021/01/12/%E5%89%8D%E7%AB%AF-Skeleton%E9%AA%A8%E6%9E%B6%E5%B1%8F/</id>
    <published>2021-01-12T09:56:43.000Z</published>
    <updated>2021-01-12T10:54:19.539Z</updated>
    
    <content type="html"><![CDATA[<p>之前在众多App上看到过骨架屏，不过今天才知道这个效果叫骨架屏hhh.<br>这个效果体验上比焦虑圈要好很多🚀<br>基础栗子: <a href="/demo/Skeleton/index.html">Base_demo</a><br>加载栗子: <a href="/demo/Skeleton/apiLoading/index.html">loading_demo</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天刷视频的时候看到骨架屏对用户体验有显著的提升，边学边敲-&gt;<a href="/demo/Skeleton/index.html">Base_demo</a><br>后面对代码进行了少量的修改 -&gt; <a href="/demo/Skeleton/apiLoading/index.html">loading_demo</a>, 将代码和请求相结合。后期可以和懒加载配合使用。🚀🌙    </p><h2 id="基础栗子"><a href="#基础栗子" class="headerlink" title="基础栗子"></a>基础栗子</h2><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><p>这里有两个div, 一个表示加载后的, 一个表示加载中的. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.imagesource.com/wp-contentuploads/2019/06/Rio.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Skeleton Demo<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">            骨架框效果测试样例，这是一段测试使用噶文字This is a test text.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>观察栗子可以发现，加载的时候背景有一道白色光影划过。这里利用了<code>background</code>的 <code>linear-gradient</code>函数，这是一种特别的image。表示渐变轴为100°, 从<code>rgba(255, 255, 255, 0) 40%</code> 渐变到 <code>rgba(255, 255, 255, .5) 50%</code>.<br>然后用<code>background-size</code> 将 <code>linear-gradient</code>图片宽拉伸一倍.<br>最后通过改变<code>position</code>来移动白色反光区域，造成光影特效.  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attribute">--loading-grey</span>: <span class="number">#ededed</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fefefe</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: inherit;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">1.8rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.description</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-class">.image</span>,</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-class">.description</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--loading-grey);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">100deg</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">40%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>) <span class="number">60%</span></span><br><span class="line">    ) <span class="built_in">var</span>(--loading-grey);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-position-x</span>: <span class="number">120%</span>;</span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">1s</span> loading ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> loading&#123;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">background-position-x</span>: -<span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-tag">h4</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">1.6rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">animation-delay</span>: .<span class="number">05s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span> <span class="selector-class">.description</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">animation-delay</span>: .<span class="number">06s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初步结束"><a href="#初步结束" class="headerlink" title="初步结束"></a>初步结束</h3><p>到此为止，基本的效果已经实现了。-&gt; <a href="/demo/Skeleton/index.html">Base_demo</a></p><h2 id="稍微修改一下"><a href="#稍微修改一下" class="headerlink" title="稍微修改一下"></a>稍微修改一下</h2><p>修改了一下，将加载和加载后相结合.  </p><h3 id="HTML结构-1"><a href="#HTML结构-1" class="headerlink" title="HTML结构"></a>HTML结构</h3><p>因为将加载和加载后结合起来, 这里取消了第二个<code>div</code>.   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Skeleton"</span> <span class="attr">class</span>=<span class="string">"card loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://www.imagesource.com/wp-content/uploads/2019/06/Rio.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Skeleton Demo<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">                骨架框效果测试样例，这是一段测试使用噶文字。This is a test text.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><p>沿用上面的css, 这里不再重复.   </p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>这里用了<code>onreadystatechange</code>, 当页面加载完时<code>readyState</code>属性会是 <code>complete</code>来判断是否加载完资源,后期可以灵活更改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> Skeleton = <span class="built_in">document</span>.querySelector(<span class="string">"#Skeleton"</span>)</span><br><span class="line">    Skeleton.classList.add(<span class="string">"loading"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> text = <span class="built_in">document</span>.querySelectorAll(<span class="string">".content h4"</span>)</span><br><span class="line">    text.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123; e.innerText = <span class="string">""</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> description = <span class="built_in">document</span>.querySelectorAll(<span class="string">".description"</span>)</span><br><span class="line">    description.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123; e.innerText = <span class="string">""</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(Skeleton.classList.remove(<span class="string">"loading"</span>))</span><br><span class="line">        text.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123; e.innerText = <span class="string">"Skeleton Demo"</span> &#125;)</span><br><span class="line">        description.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            e.innerText = <span class="string">"骨架框效果测试样例，这是一段测试使用噶文字。This is a test text."</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在众多App上看到过骨架屏，不过今天才知道这个效果叫骨架屏hhh.&lt;br&gt;这个效果体验上比焦虑圈要好很多🚀&lt;br&gt;基础栗子: &lt;a href=&quot;/demo/Skeleton/index.html&quot;&gt;Base_demo&lt;/a&gt;&lt;br&gt;加载栗子: &lt;a href=&quot;/demo/Skeleton/apiLoading/index.html&quot;&gt;loading_demo&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="web" scheme="https://blog.farmer233.top/tags/web/"/>
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript小游戏——2048Game</title>
    <link href="https://blog.farmer233.top/2020/12/29/JavaScript%E5%B0%8F%E6%B8%B8%E6%88%8F-2048Game/"/>
    <id>https://blog.farmer233.top/2020/12/29/JavaScript%E5%B0%8F%E6%B8%B8%E6%88%8F-2048Game/</id>
    <published>2020-12-29T15:17:31.000Z</published>
    <updated>2020-12-29T15:33:56.847Z</updated>
    
    <content type="html"><![CDATA[<p>这几天学校JavaScript课程实训，项目是做一个2048小游戏<br>好久没玩这个游戏了，感觉偶尔玩玩还是不错的.<br>预览、案例、栗子: <a href="/demo/2048Game/index.html">Demo</a><br>ps: 纯粹方便自己日后玩2333.   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这几天学校JavaScript课程实训，项目是做一个2048小游戏&lt;br&gt;好久没玩这个游戏了，感觉偶尔玩玩还是不错的.&lt;br&gt;预览、案例、栗子: &lt;a href=&quot;/demo/2048Game/index.html&quot;&gt;Demo&lt;/a&gt;&lt;br&gt;ps: 纯粹方便自己日后玩233</summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="web" scheme="https://blog.farmer233.top/tags/web/"/>
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯校内选拔WP</title>
    <link href="https://blog.farmer233.top/2020/12/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94WP/"/>
    <id>https://blog.farmer233.top/2020/12/23/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E5%86%85%E9%80%89%E6%8B%94WP/</id>
    <published>2020-12-23T03:38:29.000Z</published>
    <updated>2020-12-24T07:37:23.859Z</updated>
    
    <content type="html"><![CDATA[<p>上周五参加了蓝桥杯的校内选拔，给虐的惨目忍睹。<br>啪的一下很快啊，欺负我这个大三的老同志/(ㄒoㄒ)/~<br>这次我选的是python组，有点后悔没选C/C++, python一上来就图论就离谱😟<br>试卷就没有了，仅写一下当时考试时脑子短路没想到的几道题  </p><a id="more"></a><h2 id="第一题-细胞分裂"><a href="#第一题-细胞分裂" class="headerlink" title="第一题-细胞分裂"></a>第一题-细胞分裂</h2><p>题目描述：现在有一个细胞，每一个小时分裂一次，第三个小时时细胞自然死亡<br>问：第N个小时后还有几个细胞存活    </p><p>输入：<br><code>5</code><br>输出:<br><code>24</code></p><p>这道题看上去就想斐波那契数列的变形，考场上第一想法就是用数组来解但一直解决不了细胞死亡问题导致第一道程序设计题就卡壳了。<br>最气的是一出考场就想到了解法….我….<br>题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line"></span><br><span class="line">temp_list = [</span><br><span class="line">    &#123;<span class="string">"old"</span>: <span class="number">1</span>,<span class="string">"new"</span>: <span class="number">0</span>, <span class="string">"all"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"old"</span>: <span class="number">1</span>,<span class="string">"new"</span>: <span class="number">1</span>, <span class="string">"all"</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"old"</span>: <span class="number">2</span>,<span class="string">"new"</span>: <span class="number">2</span>, <span class="string">"all"</span>: <span class="number">4</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">    old = temp_list[<span class="number">-1</span>][<span class="string">"all"</span>]</span><br><span class="line">    die = temp_list[<span class="number">-3</span>][<span class="string">"old"</span>]</span><br><span class="line">    temp_dict = &#123;</span><br><span class="line">        <span class="string">"old"</span>: old,</span><br><span class="line">        <span class="string">"new"</span>: old,</span><br><span class="line">        <span class="string">"all"</span>: old * <span class="number">2</span> - die</span><br><span class="line">    &#125;</span><br><span class="line">    temp_list.append(temp_dict)</span><br><span class="line"></span><br><span class="line">print(temp_list[<span class="number">-1</span>][<span class="string">"all"</span>])</span><br></pre></td></tr></table></figure><h2 id="第二题-猴子选大王"><a href="#第二题-猴子选大王" class="headerlink" title="第二题-猴子选大王"></a>第二题-猴子选大王</h2><p>题目描述：一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第1号开始报数，每轮从1报到3，凡报到3的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？</p><p><strong>输入格式：</strong><br>输入在一行中给一个正整数N（≤1000）。<br>example:    </p><blockquote><p>11</p></blockquote><p><strong>输出格式：</strong><br>在一行中输出当选猴王的编号。<br>example:   </p><blockquote><p>7</p></blockquote><p>题解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">temp_list = list(range(n))</span><br><span class="line">target = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> len(temp_list) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> temp_list[:]:</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">3</span>:</span><br><span class="line">            temp_list.remove(value)</span><br><span class="line">            target = <span class="number">0</span></span><br><span class="line">        target += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(temp_list[<span class="number">-1</span>] + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很多题目以前都在PTA上自己解答过，但一上考场就凉了，还是自己太菜了~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上周五参加了蓝桥杯的校内选拔，给虐的惨目忍睹。&lt;br&gt;啪的一下很快啊，欺负我这个大三的老同志/(ㄒoㄒ)/~&lt;br&gt;这次我选的是python组，有点后悔没选C/C++, python一上来就图论就离谱😟&lt;br&gt;试卷就没有了，仅写一下当时考试时脑子短路没想到的几道题  &lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱语" scheme="https://blog.farmer233.top/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E8%AF%AD/"/>
    
    
    <category term="算法和数据结构" scheme="https://blog.farmer233.top/tags/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
    <category term="蓝桥杯" scheme="https://blog.farmer233.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>软考网络攻城狮学习笔记</title>
    <link href="https://blog.farmer233.top/2020/11/10/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.farmer233.top/2020/11/10/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-10T09:27:09.000Z</published>
    <updated>2020-11-27T10:00:55.686Z</updated>
    
    <content type="html"><![CDATA[<p>前天考完软考-网络攻城狮，写一下笔记趴✌🙌<br>随便记录一下，写的不算好，单纯只是做个笔记以后复习用(自己能看懂就行)</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>互联网可以划分为多个自治系统(autonomous system, AS) ，每个AS内部可以和别的 AS 使用不同的路由选择协议，根据使用的范围差异可以将路由选择协议划分为自治系统内部的协议和自治系统外的协议    </p><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><p>这次软考下午卷考了一手web安全，常见的sql注入、XSS、一句话木马、Excel宏病毒等等，不过都说些简单问题稍有了解就能答出来。写在前面是因为这东西比较好玩并且有了解过所以在前面记录一下。<br>常见的类型: </p><ul><li>sql注入</li><li>XSS</li><li>一句话木马</li><li>Excel宏病毒</li><li>APT</li><li>DDos</li><li>蠕虫病毒</li></ul><h2 id="RIP-amp-OSPF-路由-Hot"><a href="#RIP-amp-OSPF-路由-Hot" class="headerlink" title="RIP &amp; OSPF 路由(Hot)"></a>RIP &amp; OSPF 路由(Hot)</h2><p><strong>这两个协议都是自治系统内的协议</strong>，只能用于内部网络或者说小型网络    </p><h3 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h3><p>通过邻居获取网络路由，再与自己的路由表合并</p><h3 id="ospf"><a href="#ospf" class="headerlink" title="ospf"></a>ospf</h3><ul><li>寻找邻居</li><li>建立邻接关系</li><li>链路状态信息传递</li><li>计算路由</li></ul><h3 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h3><table><thead><tr><th align="center">对比</th><th align="center">rip</th><th align="center">ospf</th></tr></thead><tbody><tr><td align="center">协议对比</td><td align="center">距离矢量协议</td><td align="center">链路状态协议</td></tr><tr><td align="center">传输成本</td><td align="center">开销低</td><td align="center">传输成本好</td></tr><tr><td align="center">实现方式</td><td align="center">计算路由跳数</td><td align="center">洪泛法(向自治系统中的所有路由发送信息)</td></tr><tr><td align="center">时间</td><td align="center">每30s发送一次</td><td align="center">当网络拓扑改变的时候</td></tr><tr><td align="center">跳数限制</td><td align="center">最多15跳(16则不可达)</td><td align="center">没限制</td></tr><tr><td align="center">使用的算法</td><td align="center">距离向量算法</td><td align="center">最短路径算法(Dijkstra)</td></tr><tr><td align="center">适用网络</td><td align="center">小型网络</td><td align="center">大型网络</td></tr><tr><td align="center">ospf的优势</td><td align="center"></td><td align="center">没有跳数限制、可变子网掩码(VESM)、网络规模大、收敛速度快</td></tr><tr><td align="center">ospf中DR的作用范围</td><td align="center"></td><td align="center">一个网段</td></tr></tbody></table><h2 id="广播域-amp-amp-冲突域-Hot"><a href="#广播域-amp-amp-冲突域-Hot" class="headerlink" title="广播域 &amp;&amp; 冲突域(Hot)"></a>广播域 &amp;&amp; 冲突域(Hot)</h2><p>区别:  </p><ul><li>广播域可以跨网段，而冲突域只是发生的同一个网段的。</li><li>冲突域：在同一个冲突域中的每一个节点都能收到所有被发送的帧;</li><li>广播域：网络中能接收任一设备发出的广播帧的所有设备的集合;</li><li>冲突域：基于第一层（物理层）;</li><li>广播域：基于第二层（数据链路层）;</li><li>一个局域网就是一个广播域（往往是指一个IP段内），广播域中的机器可以收到域中其他任何一台机器的播，而不能收到域外机器的广播，域外机器也不能收到域内机器发的广播；</li><li>冲突域：一个站点向另一个站点发出信号。能收到信号的站点就构成一个冲突域。</li><li>集线器（HUB） 所有端口都在同一个广播域，冲突域内。</li></ul><h2 id="DNSの两种查询-Hot"><a href="#DNSの两种查询-Hot" class="headerlink" title="DNSの两种查询(Hot)"></a>DNSの两种查询(Hot)</h2><h3 id="迭代查询-主机向本地域名服务器查询"><a href="#迭代查询-主机向本地域名服务器查询" class="headerlink" title="迭代查询 (主机向本地域名服务器查询)"></a>迭代查询 (主机向本地域名服务器查询)</h3><p>如果主机所询问的本地域名服务器不知道被查询域名的ip, 那么本地域名服务器就以DNS客户的身份，向其他根域名服务器继续发出查询请求报文(即替该主机继续查询)，而不是让该主机自己进行下一步的查询.因此，递归擦汗寻返回的查询结果或者是所要查询的ip地址，或者是报错，表示无法查询到所需的IP地址。</p><h3 id="递归查询-本地域名服务器向根域名服务器查询"><a href="#递归查询-本地域名服务器向根域名服务器查询" class="headerlink" title="递归查询 (本地域名服务器向根域名服务器查询)"></a>递归查询 (本地域名服务器向根域名服务器查询)</h3><p>当根域名服务器收到本地域名服务器发出的迭代查询请求报文是，要么给出所要查询的IP地址，要么告诉本地域名服务器进行后续的查询(而不是替本地域名服务器进行后续的查询)。</p><img src="/2020/11/10/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/query.jpg" class="" title="query"><center>图片来源->bing搜索</center><h2 id="Tcp-amp-Udp-Hot"><a href="#Tcp-amp-Udp-Hot" class="headerlink" title="Tcp &amp; Udp(Hot)"></a>Tcp &amp; Udp(Hot)</h2><h3 id="Tcp"><a href="#Tcp" class="headerlink" title="Tcp"></a>Tcp</h3><ul><li>握手&amp;挥手</li><li>滑窗控制 –&gt; 动态规划<h3 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h3></li><li>头部大小: 8字节</li></ul><p>这部分内容太多了甚至还能引申出算法内容，以后单独拿出来讲吧~<br>(绝对不是挖坑！🕊)</p><h2 id="电子邮件协议-IMAP-amp-POP3-Hot"><a href="#电子邮件协议-IMAP-amp-POP3-Hot" class="headerlink" title="电子邮件协议(IMAP &amp; POP3)(Hot)"></a>电子邮件协议(IMAP &amp; POP3)(Hot)</h2><p>区别: </p><ol><li>pop3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作(移动、标记已读等)，不会反馈到服务器上。</li><li>IMAP客户端的操作都会反馈到服务器上</li></ol><h2 id="DES加密算法-Hot-None"><a href="#DES加密算法-Hot-None" class="headerlink" title="DES加密算法(Hot)(None)"></a>DES加密算法(Hot)(None)</h2><p>做了5年的软考题，DES加密算法可以说是必考题了，每年都考。</p><h2 id="卫星通信中的差错控制"><a href="#卫星通信中的差错控制" class="headerlink" title="卫星通信中的差错控制"></a>卫星通信中的差错控制</h2><ol><li>选择重传ARQ</li><li>前项差错控制FEC</li><li>多站分集的自动反馈重发</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前天考完软考-网络攻城狮，写一下笔记趴✌🙌&lt;br&gt;随便记录一下，写的不算好，单纯只是做个笔记以后复习用(自己能看懂就行)&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;互</summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机网络基础" scheme="https://blog.farmer233.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端 | 打字效果</title>
    <link href="https://blog.farmer233.top/2020/11/01/%E5%89%8D%E7%AB%AF-%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>https://blog.farmer233.top/2020/11/01/%E5%89%8D%E7%AB%AF-%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/</id>
    <published>2020-11-01T06:25:13.000Z</published>
    <updated>2020-11-01T12:30:19.990Z</updated>
    
    <content type="html"><![CDATA[<p>今天刷别人博客的时候，看到了一个有趣的效果-&gt;<strong>打字</strong><br>预览、案例、栗子: <a href="/demo/cursor.html">Demo</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚看到这个效果的时候觉得很惊艳，自己撸了一遍代码-&gt;<a href="/demo/cursor.html">Demo</a><br>直到写这篇博客的时候才发现github上面有<strong>打字机</strong>的开源项目！！！<br>在这里mark下，下次直接用得了/(ㄒoㄒ)/~~<br>Github: <a href="https://github.com/mattboldt/typed.js/" target="_blank" rel="noopener">https://github.com/mattboldt/typed.js/</a></p><h2 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h2><p>这部分的结构十分简单, 用两个标签一个存放文本内容、一个用来显示光标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cursor cursor-flash"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>要注意, 这里光标不能用<code>display</code>属性来控制光标的显示和隐藏，因为这会使html消失导致文本错位,导致效果太核突.<br>所以这里用<code>opacity</code>属性,通过控制光标的透明度来实现.<br>首先贴出关键部分代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cursor-flash</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: flash .<span class="number">7s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> flash &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>此时光标已经开始闪烁了, 接下来我们只要让文本逐个的添加就好了.<br>分析了一下效果，有以下几个功能块:</p><ul><li>获取节点: <code>querySelector</code></li><li>字符串切割: <code>substr()</code></li><li>定时添加字符串-&gt;定时器: <code>setTimeout</code></li><li>打字和删除-&gt;异步操作: <code>Promise</code></li></ul><p>code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str_input = <span class="built_in">document</span>.querySelector(<span class="string">".text"</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"Text cursor Demo!"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTextPrint</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            str_input.innerHTML = value</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, <span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">await</span> setTextPrint(str.substr(<span class="number">0</span>, i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = str.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">await</span> setTextPrint(str.substr(<span class="number">0</span>, i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        main(!flag)</span><br><span class="line">    &#125;, <span class="number">700</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="完善Demo页面"><a href="#完善Demo页面" class="headerlink" title="完善Demo页面"></a>完善Demo页面</h2><p>目前页面太过单调, 用CSS修饰一下页面-&gt;<a href="/demo/cursor.html">Demo</a>,完整代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-id">#233</span>, <span class="selector-tag">rgb</span>(50, 155, 182));</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">            font-size: 48px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.cursor</span> &#123;</span></span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.cursor-flash</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">animation</span>: <span class="selector-tag">flash</span> <span class="selector-class">.7s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> flash &#123;</span></span><br><span class="line">            0% &#123;</span><br><span class="line">                opacity: 1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            50% &#123;</span><br><span class="line">                opacity: 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                opacity: 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="./vue.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cursor cursor-flash"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> str_input = <span class="built_in">document</span>.querySelector(<span class="string">".text"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> str = <span class="string">"Text cursor Demo!"</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">setTextPrint</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line">                    str_input.innerHTML = value</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 200)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">flag</span>) </span>&#123;</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= str.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">await</span> setTextPrint(str.substr(<span class="number">0</span>, i))</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = str.length; i &gt;= <span class="number">0</span>; i--) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">await</span> setTextPrint(str.substr(<span class="number">0</span>, i))</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">                main(!flag)</span><br><span class="line">            &#125;, 700)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main(1)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天刷别人博客的时候，看到了一个有趣的效果-&amp;gt;&lt;strong&gt;打字&lt;/strong&gt;&lt;br&gt;预览、案例、栗子: &lt;a href=&quot;/demo/cursor.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="web" scheme="https://blog.farmer233.top/tags/web/"/>
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Bilibili 2020 1024  Write Up</title>
    <link href="https://blog.farmer233.top/2020/10/26/Bilibili-2020-1024-Write-Up/"/>
    <id>https://blog.farmer233.top/2020/10/26/Bilibili-2020-1024-Write-Up/</id>
    <published>2020-10-26T09:11:23.000Z</published>
    <updated>2020-10-26T15:32:45.263Z</updated>
    
    <content type="html"><![CDATA[<p>和往常一样每天打开电脑的第一件事就是打开B站。非常Amazing啊，1024这天打开后看到header居然是1024节<br>好奇打开看了一下，发现了233娘的挑战状…emm虽然不是第一次玩ctf，但B站的首个ctf怎么也要玩一下的嘛🤭<br><del>不过做完之后感觉B站的题有点怪，群里的大佬们也在吐槽题目有点离谱</del> 不过作为一个臭弟弟，自然没有发言权，所以还是写写自己会做的wp算鸟 –(˙&lt;&gt;˙)/–<br>这次不是🕊！</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉这次会做的题和攻防世界的入门题挺像的，都是些常规的套路(除了某些猜猜猜除外)。不会的还是不会，希望B站官方出个WP解解惑。<br>希望看到B站官网wp的时候我不会打自己一巴掌233…😄<br>这次就做了七题，做完后发现网上的答案都是7题~emmm看来和真正的大佬还是有差距啊！</p><ul><li><input checked="" disabled="" type="checkbox"> 页面的背后是什么？</li><li><input checked="" disabled="" type="checkbox"> 真正的秘密只有特殊的设备才能看到</li><li><input checked="" disabled="" type="checkbox"> 密码是啥？</li><li><input checked="" disabled="" type="checkbox"> 对不起，权限不足～</li><li><input checked="" disabled="" type="checkbox"> 别人的秘密</li><li><input disabled="" type="checkbox"> 结束亦是开始</li><li><input disabled="" type="checkbox"> 第七题</li><li><input checked="" disabled="" type="checkbox"> 第八题</li><li><input disabled="" type="checkbox"> 第九题</li><li><input checked="" disabled="" type="checkbox"> 第十题</li></ul><h2 id="页面的背后是什么？"><a href="#页面的背后是什么？" class="headerlink" title="页面的背后是什么？"></a>页面的背后是什么？</h2><p>第一题没啥好讲的，标准的第一题，另外题目<code>页面的背后是什么</code> 也在暗示。<br>正如大部分的ctf题一样，第一题一般都是在原码中找flag, 果断按下F12果然看到了flag. 直接拿下！~  </p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T1.png" class="" title="t1"><h2 id="真正的秘密只有特殊的设备才能看到"><a href="#真正的秘密只有特殊的设备才能看到" class="headerlink" title="真正的秘密只有特殊的设备才能看到"></a>真正的秘密只有特殊的设备才能看到</h2><p>进到页面看到<strong>需要使用bilibili Security Browser浏览器访问～</strong>, 再和题目<strong>特殊的设备</strong>一结合那肯定就是要我们伪装特定的浏览器。<br>浏览器的标识那肯定就是UA嘛，所以这题就是用b站的UA来访问~<br>其实这道题在一个月前的政采云前端题中也有出现！<br>具体的方法有如下几种(我个人能想到的):</p><ol><li>直接浏览器改UA(最佳答案)</li><li>用<strong>POSTMAN</strong>发送http请求</li><li>用python解决</li></ol><p>我这里挑最简单的方法-&gt;浏览器直接来，如图：  </p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T2.png" class="" title="T2"><p><strong>答案</strong></p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T2_1.png" class="" title="T2_1"><h2 id="密码是啥？"><a href="#密码是啥？" class="headerlink" title="密码是啥？"></a>密码是啥？</h2><p>这题就两个字：<strong>离谱</strong> ！！！！<br>这题我一开始还在看是不是sql注入，然后爆出账号密码，结果是弱密码… 非常的无语😶<br>讲白了就是猜，硬猜！  </p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T3.png" class="" title="T3"><h2 id="对不起，权限不足～"><a href="#对不起，权限不足～" class="headerlink" title="对不起，权限不足～"></a>对不起，权限不足～</h2><p>第四题一来，看到的是<strong>欢迎超级管理员登录</strong><br>我一开始的想法是结合第三题的登录，把第三题登录后的cookie弄过来，结果尝试后发现不行。<br>一开始的思路不对，导致我在这里卡了半个小时，后来看到<strong>超级管理员</strong>这个词感觉不太对劲，然后再看了cookie一眼，发现多了一个key <code>role</code><br>再看了一下代码:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"api/ctf/4"</span>,</span><br><span class="line">    type: <span class="string">"get"</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">if</span> (data.code == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果有值：前端跳转</span></span><br><span class="line">            $(<span class="string">'#flag'</span>).html(<span class="string">"欢迎超级管理员登陆～答案是 : &#123;&#123; "</span> + data.data + <span class="string">" &#125;&#125;"</span>.toLowerCase() )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没值</span></span><br><span class="line">            $(<span class="string">'#flag'</span>).html(<span class="string">"有些秘密只有超级管理员才能看见哦~"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的, 再联合<strong>超级管理员</strong>，接触过ctf的都清楚<code>user</code>和<code>MD5</code>都是粘在一起的<br>然后我差了一下<code>role</code>这里的md5，真的查到了-&gt;<code>user</code>: </p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T4_md5_user.png" class="" title="md5_user"><p>这里解出来的是user,那么不用多说了吧，肯定是把管理员的md5换进去囖！</p><p>通过查<strong>超级管理员</strong>的md5,芜湖得到答案！<br><code>role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T4.png" class="" title="T4"><h2 id="别人的秘密"><a href="#别人的秘密" class="headerlink" title="别人的秘密"></a>别人的秘密</h2><p>这题和第三题一样，就离谱的过分！！又是JQ这道题更离谱，上来先在 jQuery 的 <code>$</code>对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 100336889），接下来就是 <code>GET /api/ctf/5?uid=${uid}。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">        $.getUrlParam = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> uid = $.getUrlParam(<span class="string">'uid'</span>);</span><br><span class="line">    <span class="keyword">if</span> (uid == <span class="literal">null</span>) &#123;</span><br><span class="line">        uid = <span class="number">100336889</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"api/ctf/5?uid="</span> + uid,</span><br><span class="line">        type: <span class="string">"get"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="keyword">if</span> (data.code == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果有值：前端跳转</span></span><br><span class="line">                $(<span class="string">'#flag'</span>).html(<span class="string">"欢迎超级管理员登陆～flag : "</span> + data.data)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果没值</span></span><br><span class="line">                $(<span class="string">'#flag'</span>).html(<span class="string">"这里没有你想要的答案～"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>没什么好说的，直接暴力遍历就vans了。<br>Node.js解法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">        $.getUrlParam = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">            <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> uid = $.getUrlParam(<span class="string">'uid'</span>);</span><br><span class="line">    <span class="keyword">if</span> (uid == <span class="literal">null</span>) &#123;</span><br><span class="line">        uid = <span class="number">100336889</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"api/ctf/5?uid="</span> + uid,</span><br><span class="line">        type: <span class="string">"get"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="keyword">if</span> (data.code == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果有值：前端跳转</span></span><br><span class="line">                $(<span class="string">'#flag'</span>).html(<span class="string">"欢迎超级管理员登陆～flag : "</span> + data.data)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果没值</span></span><br><span class="line">                $(<span class="string">'#flag'</span>).html(<span class="string">"这里没有你想要的答案～"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>python3解法: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">from urllib.request import DataHandler</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;45.113.201.36&#x2F;api&#x2F;ctf&#x2F;5?uid&#x3D;&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;bilibili Security Browser&#39;,</span><br><span class="line">    &#39;cookie&#39;: &#39;session&#x3D;233333333333333333333333333333333333; Path&#x3D;&#x2F;; Domain&#x3D;45.113.201.36; &#39;</span><br><span class="line">              &#39;Expires&#x3D;Sun, 24 Oct 2021 06:24:58 GMT;role&#x3D;7b7bc2512ee1fedcd76bdc68926d4f7b; Path&#x3D;&#x2F;; &#39;</span><br><span class="line">              &#39;Domain&#x3D;45.113.201.36; &#39;</span><br><span class="line">&#125;</span><br><span class="line">for i in range(100336889, 100337889):</span><br><span class="line">    request &#x3D; urllib.request.Request(url + str(i), headers&#x3D;headers)</span><br><span class="line">    response &#x3D; urllib.request.urlopen(request)</span><br><span class="line">    print(response.read())</span><br></pre></td></tr></table></figure><h2 id="结束亦是开始"><a href="#结束亦是开始" class="headerlink" title="结束亦是开始"></a>结束亦是开始</h2><blockquote><p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p></blockquote><p>看源码每一个地方能提交的，找了半天也没找到可以下手的地方，URL 的格式是 <code>/blog/single.php?id=1</code><br>做这题的时候已是下午6点多了，想不出来怎么弄只能挂个<a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a>来爆破目录然后去恰饭了。<br>爆破得到了一个路径，该路径是指向第十题的<br>然后用端口扫描发现了第八题的flag，然后就没有然后了~….我好菜啊！！！！</p><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><p>这题要靠端口扫描，对常规端口扫描后发现6379端口开发，然后就是有手就行的未设防Redis服务器啦。<br>直接用终端连接靶机，直接拿下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h [靶机 IP] -p 6379</span></span><br><span class="line">45.113.201.36:6379&gt; keys</span><br><span class="line">flag8</span><br><span class="line">45.113.201.36:6379&gt; get flag8</span><br></pre></td></tr></table></figure><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T8.png" class="" title="redis"><blockquote><p>吐槽一下我前面的大佬，把很多无关的flag都丢进来，搞的我白开心了一场<del>/(ㄒoㄒ)/</del></p></blockquote><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><p>这题的入口是从爆出来的，爆破得到了一个目录<code>test.php</code><br>进入后看到是一个<code>jsFuck</code>，直接丢到控制台运行一下~<br>得到了两句话</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"\u7a0b\u5e8f\u5458\u6700\u591a\u7684\u5730\u65b9"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"bilibili1024havefun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log()</span><br></pre></td></tr></table></figure><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T10_1.png" class="" title="T10_jsFuck"><p>作为老web狗，一看这个编码反手就是丢控制台，得到:<code>程序员最多的地方</code>，那么程序猿最多的地方是哪？都懂吧？<br>然后搜索<code>bilibili1024havefun</code>,果然找到了！</p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/T10_github.png" class="" title="github"><p>接着把仓库clone下来，或者直接在github上看~<br>那么现在我们知道了文件名<code>end.php</code>，也知道了对应的后端代码，所以这题目就在<code>/blog/end.php</code>里面了。再看看代码<code>is_numeric</code>，因此这题就是<code>is_numeric</code>和<code>intval</code>绕过囖，所以最终的url是：<br><code>/blog/end.php?id[]=2&amp;id[]=2&amp;url=./flag.txt</code></p><p>这里我一开始绕过后还是得不到<code>flag</code>,最后看群里的大佬吐槽才发现原来是flag.txt…..🤮<br>然后我们会看到一张图片，用编辑器打开后在最后面就能找到flag了,end!</p><img src="/2020/10/26/Bilibili-2020-1024-Write-Up/bilibili_havefun.jpg" class="" title="bilibili"><blockquote><p>最后再吐槽一下，当时可能做的人太多了。估计很多大佬都在玩靶机，活活拖死靶机~233</p></blockquote><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>也没啥好说的了，该会的做了，除了第九题题目都没看到外，第6题、第7题我是确实不会~无fucker说…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和往常一样每天打开电脑的第一件事就是打开B站。非常Amazing啊，1024这天打开后看到header居然是1024节&lt;br&gt;好奇打开看了一下，发现了233娘的挑战状…emm虽然不是第一次玩ctf，但B站的首个ctf怎么也要玩一下的嘛🤭&lt;br&gt;&lt;del&gt;不过做完之后感觉B站的题有点怪，群里的大佬们也在吐槽题目有点离谱&lt;/del&gt; 不过作为一个臭弟弟，自然没有发言权，所以还是写写自己会做的wp算鸟 –(˙&amp;lt;&amp;gt;˙)/–&lt;br&gt;这次不是🕊！&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱语" scheme="https://blog.farmer233.top/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E8%AF%AD/"/>
    
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
    <category term="CTF" scheme="https://blog.farmer233.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>[日记] - 服务器爆炸</title>
    <link href="https://blog.farmer233.top/2020/10/25/%E6%97%A5%E8%AE%B0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%88%86%E7%82%B8/"/>
    <id>https://blog.farmer233.top/2020/10/25/%E6%97%A5%E8%AE%B0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%88%86%E7%82%B8/</id>
    <published>2020-10-25T12:06:56.000Z</published>
    <updated>2020-10-28T09:31:45.827Z</updated>
    
    <content type="html"><![CDATA[<p>真的太…糙了</p><p>今天打完游戏下线，发现同学在微信群说资源站权限忘记配置…..</p><a id="more"></a><p>哔哩吧啦的一大堆，因为最近在弄资源站同步器(sync)，所以资源站重新整理了一遍。<br>然鹅我刚打完电动迷迷糊糊的，上服务器看了一下，我这边资源站的权限也没有更改，记得刚刚的聊天记录里面有一条改权限的命令，我也没看清，直接拿来用了-&gt;cp走起！<br>命令、截图如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown xiaotao:www-data / -R</span></span><br></pre></td></tr></table></figure><img src="/2020/10/25/%E6%97%A5%E8%AE%B0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%88%86%E7%82%B8/weChatLog.png" class="" title="WeChat"><p>啊啊啊啊啊….稀里糊涂的就<strong>复制粘贴回车</strong>，直接素质三连，行云流水。当我按下回车的时候，突然出现的这个画面直接把我拉回现实，堪比冰桶挑战啊~ 😟😰<br>好家伙，整个人都精神了，脑子停止思考了一秒反手就是<code>ctrl+c</code>。毫无疑问，为时已晚~<br>此时我从新开了一个新的终端连接，已经无法连上了，当务之急就是回复ssh服务。<br>要把权限改回去，那肯定要root用户了(此时sudo已经boom上天了<del>！)<br>切到<strong>root</strong>后，再把权限改回来，但此时的权限已经不是之前的了，总归差了亿点/(ㄒoㄒ)/</del>  </p><h2 id="随便再说点"><a href="#随便再说点" class="headerlink" title="随便再说点"></a>随便再说点</h2><p>已经忘了是第几次了，脑子不清醒的时候输错命令把服务器弄炸….😰<br>也不知道好不好，弄炸了就要想办法修复，然后就又学到东西了🤭</p><img src="/2020/10/25/%E6%97%A5%E8%AE%B0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%88%86%E7%82%B8/chown.png" class="" title="chown">]]></content>
    
    
    <summary type="html">&lt;p&gt;真的太…糙了&lt;/p&gt;
&lt;p&gt;今天打完游戏下线，发现同学在微信群说资源站权限忘记配置…..&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱语" scheme="https://blog.farmer233.top/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E8%AF%AD/"/>
    
    
    <category term="Linux" scheme="https://blog.farmer233.top/tags/Linux/"/>
    
    <category term="生活记录" scheme="https://blog.farmer233.top/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
    <category term="胡言乱语" scheme="https://blog.farmer233.top/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="吐槽" scheme="https://blog.farmer233.top/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>C语言小笔记—&gt;复习(刷题)记录</title>
    <link href="https://blog.farmer233.top/2020/10/21/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%AC%94%E8%AE%B0-%E5%A4%8D%E4%B9%A0-%E5%88%B7%E9%A2%98-%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.farmer233.top/2020/10/21/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%AC%94%E8%AE%B0-%E5%A4%8D%E4%B9%A0-%E5%88%B7%E9%A2%98-%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-21T03:08:13.000Z</published>
    <updated>2020-10-22T11:55:04.785Z</updated>
    
    <content type="html"><![CDATA[<p>快到一年一度的蓝桥杯选拔了, 可惜学校不开设python组 /(ㄒoㄒ)/~~😟<br>于是花了一个多星期来复习C语言顺便刷了点题，整理了一点笔记，记录一下。</p><a id="more"></a><h2 id="原码、反码、补码和移码"><a href="#原码、反码、补码和移码" class="headerlink" title="原码、反码、补码和移码"></a>原码、反码、补码和移码</h2><p>计算机处理信息都是二进制形式表示的，下面以整型数据格式举栗子👇<br>不妨设每个整数在内存中占用两个字节存储，最左边的一位(最高位)是符号位，0代表正数，1代表负数, 整数<code>1</code>的<code>±</code>原码、反码和补码如下👇  </p><h3 id="栗子-demo"><a href="#栗子-demo" class="headerlink" title="栗子(demo)"></a>栗子(demo)</h3><ul><li>假设每个整数在内存中占用两个字节存储(16位)</li><li>正数部分-&gt;<code>+1</code><ol><li>原码: <code>00000000 00000001</code>  </li><li>反码: <code>00000000 00000001</code></li><li>补码: <code>00000000 00000001</code></li><li>移码: <code>10000000 00000001</code></li></ol></li><li>负数部分-&gt;<code>-1</code><ol><li>原码: <code>10000000 00000001</code></li><li>反码: <code>11111111 11111110</code></li><li>补码: <code>11111111 11111111</code></li><li>移码: <code>01111111 11111111</code></li></ol></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>原码: 最高位(最左边)是符号位，0-&gt;正，1-&gt;负。</li><li>正数: 原码、反码和补码都一样</li><li>负数 <ol><li>反码: 符号位是1，其余各位对原码取反。</li><li>补码: 反码加1.</li></ol></li><li>移码: 补码的基础上，符号位取反(这里只讲一般的移码)  </li></ul><h2 id="常用的字符串处理函数"><a href="#常用的字符串处理函数" class="headerlink" title="常用的字符串处理函数"></a>常用的字符串处理函数</h2><p>C语言的标准库中含有很多非常有用的字符串处理函数。它们都要求以字符串作为参数，返回整数值或指向char的指针。<br>在头文件<code>stdio.h</code>和<code>string.h</code>中给出了字符串处理函数的原型，使用这些字符串处理函数时要引入相应的头文件。  </p><h3 id="字符串的输入和输出"><a href="#字符串的输入和输出" class="headerlink" title="字符串的输入和输出"></a>字符串的输入和输出</h3><p>在系统文件<code>stdio.h</code>的定义中  </p><ul><li>函数<code>scanf()</code>和<code>gets()</code>可用来输入字符串</li><li>函数<code>printf()</code>和<code>puts()</code>可用来输出字符串</li></ul><p>具体用法:  </p><ol><li><p>字符串输入函数gets(s)<br>参数<code>s</code>是字符数组名。函数从输入流中得到一个字符串，遇到回车输入结束，自动将输入的数据和<code>&#39;\0&#39;</code>送入数组中。采用该函数输入的字符串允许带空格。<br>实际上函数<code>gets()</code>有返回值，如果输入成功则返回值是字符串第一个字符的地址，如果失败则返回<code>NULL</code>。但一般情况下我们用它来输入字符串，因此不用关心它的返回值。  </p></li><li><p>字符串输出函数puts(s)<br>参数s可以是字符数组名或字符串常量。输出时遇到字符串结束符(<code>&#39;\0&#39;</code>)时自动将其转换成<code>&#39;\n&#39;</code>,即输出后换行。同样的，如果成功输出则返回换行符’\n’，否则返回<code>EOF</code>。  </p></li></ol><p>其中<code>scanf()</code>和<code>printf()</code>两个函数不再赘述。</p><h3 id="字符串的复制、连接和比较"><a href="#字符串的复制、连接和比较" class="headerlink" title="字符串的复制、连接和比较"></a>字符串的复制、连接和比较</h3><p><strong>这里讲的三个功能函数，都在系统头文件<code>string.h</code>中定义</strong>  </p><h4 id="字符串复制函数，函数原型-gt-char-strcpy-char-s1-char-s2"><a href="#字符串复制函数，函数原型-gt-char-strcpy-char-s1-char-s2" class="headerlink" title="字符串复制函数，函数原型-&gt; char *strcpy(char *s1, char *s2)"></a>字符串复制函数，函数原型-&gt; <code>char *strcpy(char *s1, char *s2)</code></h4><p>该函数把字符串s2复制到s1(<strong>注意是S2-&gt;S1</strong>), 直到遇到’\0’为止。s1要有足够的空间容纳s2，且s1中的内容被覆盖，函数返回的是s1。<br>使用方式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(s1, s2);</span><br></pre></td></tr></table></figure><p>参数s1必须是字符型数组基地址，参数s2可以是字符数组名或字符串常量。<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> str1[<span class="number">80</span>], str2[<span class="number">80</span>], from[<span class="number">80</span>] = <span class="string">"happy"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(str1, from);</span><br><span class="line"><span class="built_in">strcpy</span>(str2, <span class="string">"key"</span>);</span><br><span class="line">&gt;&gt;&gt; str1 =&gt; happy</span><br><span class="line">&gt;&gt;&gt; str2 =&gt; key</span><br></pre></td></tr></table></figure><h4 id="字符串连接函数strcat-s1-s2"><a href="#字符串连接函数strcat-s1-s2" class="headerlink" title="字符串连接函数strcat(s1, s2)"></a>字符串连接函数<code>strcat(s1, s2)</code></h4><p>参数s1必须是字符数组基地址，参数s2可以是字符数组名或字符串常量。<code>strcat()</code>函数将s2接到s1的后面，此时，s1中原有的结束符’\0’被放置在连接后的结束位置上。 <strong>注意</strong>数组s1要足够大！！！，以便存放连接后的新字符串。<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[<span class="number">80</span>] = <span class="string">"hello"</span>, str2[<span class="number">80</span>], t[<span class="number">80</span>]= <span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str1, t);</span><br><span class="line"><span class="built_in">strcat</span>(str2, str1);</span><br><span class="line"><span class="built_in">strcat</span>(str2, <span class="string">"!"</span>);</span><br><span class="line">&gt;&gt;&gt; str1=&gt; <span class="string">"hello world"</span></span><br><span class="line">&gt;&gt;&gt; str2=&gt; <span class="string">"helli world！"</span></span><br></pre></td></tr></table></figure><p><strong>C语言不像别的高级语言那样，能用<code>+</code>拼接字符串！</strong></p><h4 id="字符串比较函数-strcmp-s1-s2"><a href="#字符串比较函数-strcmp-s1-s2" class="headerlink" title="字符串比较函数 strcmp(s1, s2)"></a>字符串比较函数 strcmp(s1, s2)</h4><p>和函数<code>strcpy()</code>中对参数的要求不同, <code>strcmp()</code>中的参数s1和s2可以是字符数组名或字符串常量。函数<code>strcmp()</code>返回一个整数，给出字符串s1和s2的比较结果:</p><ol><li>若s1和s2相等，返回0。</li><li>若s1 &gt; s2, 返回正数。</li><li>若s1 &lt; s2, 返回负数。</li></ol><p>比较规则: 从字符串的首字符开始，依次比较(<strong>比较字符的ASCII码</strong>), 直到出现不同的字符或遇到’\0’为止。如果相同，则返回0，如果不同，则返回第一个不相同字符的比较结果-&gt; 两个字符ASCII值的差，即第一个字符串中的字符减去第二个字符串中的字符。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><code>gets()</code>可以获取带有<strong>空格</strong>的字符串，而<code>scanf()</code>则不行</li><li><code>strcmp()</code>返回的是两个字符串<strong>第一个</strong>不同字符的<strong>ASCII值</strong>的差。</li><li><code>strcat(s1, s2)</code>是把s2接到s1后面。</li></ol><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>关于指针，我实在想不到怎么解释,感觉就像它的名字一样。在计算机中像一根针一样指向一个内存地址。<br>我感觉下面这张图挺形象的↓👇  </p><img src="/2020/10/21/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%AC%94%E8%AE%B0-%E5%A4%8D%E4%B9%A0-%E5%88%B7%E9%A2%98-%E8%AE%B0%E5%BD%95/point.png" class="" title="point"><p>如果你用过git, 你一定知道什么叫分支或者版本回溯。我们看当前分支的时候，都会看到当前分支的分支名前面有个<code>*</code>来表示我们现在所处的分支<br>其实这里的<code>*</code>就是一个指针，指向我们当前的分支。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">  test</span><br><span class="line">  test_2</span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p>其实数组和指针关系很近，数组变量名就是数组第一个元素的地址，因此数组名本身是一个地址即指针值。在访问内存方面，指针和数组几乎是相同的，当然也有区别，<strong>这些区别是微妙且重要的</strong>-&gt;指针是以地址作为值的变量，而数组名的值是一个特殊的固定地址，可以把它看作是指针常量。<br>首先给出如下定义:<br><code>int a[100], *p;</code><br>因为数组是一段连续的空间，所以以下两条语句是等价的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p指针等于数组的基地址+偏移量，这里便宜1个单位</span></span><br><span class="line">p = a + <span class="number">1</span>; </span><br><span class="line"><span class="comment">// 用数组下标的方式表示偏移量  </span></span><br><span class="line">p = &amp;a[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>再看几个循环打印数组内容的栗子(数组已经赋值):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *p;</span><br><span class="line"><span class="keyword">for</span>(p = a; p&lt;= &amp;a[<span class="number">9</span>]; p++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个方法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(p+i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个方法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *p = a; <span class="comment">// 定义的时候赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]); <span class="comment">//这里p[i]和a[i]等价</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几个栗子充分的说明了指针和数组的关系。  </p><h3 id="数组、指针和函数"><a href="#数组、指针和函数" class="headerlink" title="数组、指针和函数"></a>数组、指针和函数</h3><p>数组的形参实际上是一个指针。当参数传递时，主函数传递的是<strong>数组的基地址</strong>，数组元素本身是不被复制。<br>举个栗子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 int a[] 等价于 int *a</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        s += a[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针和动态存储"><a href="#指针和动态存储" class="headerlink" title="指针和动态存储"></a>指针和动态存储</h3><h4 id="为什么需要动态存储"><a href="#为什么需要动态存储" class="headerlink" title="为什么需要动态存储"></a>为什么需要动态存储</h4><p>一个程序通常需要各种变量来保存被处理的数据，但变量使用前必须要被定义且安排好存储空间(包括内存起始地址和存储单元大小)。C语言的<strong>全局变量</strong>、<strong>静态局部变量</strong>的存储是在编译时确定的。</p><ul><li>其存储空间的分配时在程序开始执行前完成的</li><li>局部自动变量-&gt;在执行进入变量定义所在的语句时为他们分配存储单元(这种变量的大小也是静态确定的)</li></ul><p>而静态方式存储的好处时实现方便、效率高。但某些问题不好解决，比如下面的这个栗子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">int</span> i, *p;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum: %d\n"</span>, sum);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(p=a; p &lt;= a+<span class="number">9</span>; p++)</span><br><span class="line">        sum += *p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum: %d\n"</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个栗子中，每次求和的项数都可能不同，可能解决的办法就是定义一个很大的数组，以保证输入不会超出数组。<br>如果可以根据运行时的实际情况，让程序自己动态的分配存储空区，因此<strong>C语言</strong>为此提供了动态存储管理机制，允许程序动态申请和释放存储空间。  </p><h4 id="动态存储"><a href="#动态存储" class="headerlink" title="动态存储"></a>动态存储</h4><p>关于动态存储的操作中，C语言提供了一组标准函数，定义在<code>stdlib.h</code>里面.<br>先贴几个常用的函数:👇  </p><ol><li><p>动态存储分配函数-&gt;<code>void *malloc(unsigned size)</code></p><ul><li>在内存的动态存储区中分配一连续的空间，长度为 <code>·</code>size`</li><li>申请成功-&gt;内存空间的起始地址，若不成功-&gt;NULL(0)</li></ul></li><li><p>计数动态存储分配函数-&gt;<code>void *calloc(unsigned n, unsigned size)</code></p><ul><li>在内存的动态存储区中分配<code>n</code>个连续空间，每个的长度为<code>size</code></li><li>分配后将存储块全部初始化为0</li><li>申请成功-&gt;返回一个指向分配内存空间起始地址的指针，若不成功-&gt;NULL(0)</li></ul></li><li><p>动态存储释放函数-&gt;<code>void free( void *ptr)</code></p><ul><li>释放由动态存储分配函数申请得到的整块内存空间</li><li>ptr指针要指向空间的首地址，如果是空指针，则啥都不做</li></ul></li><li><p>分配调整函数-&gt;<code>void *realloc( void *ptr, unsigned size)</code></p><ul><li>更改以前的存储分配。</li><li><code>ptr</code>必须是以前通过动态存储分配得到的指针</li><li>参数<code>size</code>为现在需要的空间大小，如果分配失败则返回NULL，同时原<code>ptr</code>指向存储块的内容不变。</li><li>如果分配成功，返回一片能存放大小为<code>size</code>的区块，并且保证该块的内容与原块一致。</li><li>如果<code>size</code>比原来小，则返回原块<code>szie</code>范围内的数据(通俗理解: 截断了)</li></ul></li></ol><blockquote><p>注意！ malloc()对所分配的存储块不做任何事情，calloc()对整个区域进行初始化。</p></blockquote><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><!-- 如果学过面向对象的话，可以把结构体理解成一个简易版的类。  举一个栗子，每个班都有一本花名册，上面一般记录了我们的姓名，性别，学号等信息。现在做一个录入学生信息的程序，难道我们要对每个学生都分配一个变量吗？ 答案显然是NO。因此我们就要用到结构体(或者说是对象，如果你了解过面向对象)分析一下，姓名的数据类型是字符串、学号是整型而性别我们可以用字符来表示，也可以用约定的整型数字来表示，因此我们可以这么定义结构体 --><!-- 我们要用代码表示一个学生(这里的学生指学生这个名词对象)，我们可以想一下我们要用到 **学生** --><p>其定义语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名&#123;</span></span><br><span class="line">    类型名 结构成员名<span class="number">1</span>;</span><br><span class="line">    类型名 结构成员名<span class="number">2</span>;</span><br><span class="line">    类型名 结构成员名<span class="number">3</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体的定义和初始化(使用), Demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名 变量名;</span></span><br><span class="line"><span class="comment">// 比如我已经定义了一个叫student的结构体，可以这么初始化它:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s1</span>, <span class="title">s2</span>;</span></span><br></pre></td></tr></table></figure><h3 id="结构体的使用-进阶"><a href="#结构体的使用-进阶" class="headerlink" title="结构体的使用(进阶)"></a>结构体的使用(进阶)</h3><ol><li><p>混合定义-&gt; 其实就是在定义结构体的时候顺便声明变量<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名&#123;</span>  </span><br><span class="line">    类型名 结构成员名<span class="number">1</span>;</span><br><span class="line">    类型名 结构成员名<span class="number">2</span>;</span><br><span class="line">    类型名 结构成员名<span class="number">3</span>;</span><br><span class="line">&#125;结构变量名表;</span><br><span class="line"><span class="comment">// demo</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">num</span>;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">&#125;s1, s2;</span><br></pre></td></tr></table></figure></li><li><p>无类型名定义<br>无类型名指定义结构体变量时省略结构名。<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    类型名 结构成员;</span><br><span class="line">&#125;结构变量名表;</span><br></pre></td></tr></table></figure><p>这种定义只有<strong>结构变量名表</strong>里的才能用.</p></li></ol><h3 id="结构体套娃"><a href="#结构体套娃" class="headerlink" title="结构体套娃"></a>结构体套娃</h3><!-- 现在，我们就定义好了一个结构体。 --><p>结构体的嵌套定义, Demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> city[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> street[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">int</span> zip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nest_student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> computer, english, math;</span><br><span class="line">    <span class="keyword">double</span> average;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="再随便说说"><a href="#再随便说说" class="headerlink" title="再随便说说"></a>再随便说说</h2><p>PTA的刷题记录我都放在<a href="https://github.com/Farmer-chong/pta" target="_blank" rel="noopener">Github</a>上了, 学的不精欢迎各位大佬提issue或pr指出！~😊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快到一年一度的蓝桥杯选拔了, 可惜学校不开设python组 /(ㄒoㄒ)/~~😟&lt;br&gt;于是花了一个多星期来复习C语言顺便刷了点题，整理了一点笔记，记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="PTA" scheme="https://blog.farmer233.top/tags/PTA/"/>
    
    <category term="C语言" scheme="https://blog.farmer233.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>[十月,你好]国庆中秋双节快乐</title>
    <link href="https://blog.farmer233.top/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
    <id>https://blog.farmer233.top/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/</id>
    <published>2020-10-01T02:47:42.000Z</published>
    <updated>2020-10-01T03:21:44.480Z</updated>
    
    <content type="html"><![CDATA[<p>拾月，你好！🤭🥧<br>国庆快乐🦆 o(<em>￣▽￣</em>)ブ😊<br>又到了吃月饼的日子，月饼可好吃了！🍪<br>收集了一点十月的图片，新的一个月要元气满满🦆</p><a id="more"></a><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/China.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10_5.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10_4.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10_3.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10_2.jpg" class="" title="ChinaNationalDay"><img src="/2020/10/01/%E5%9B%BD%E5%BA%86%E4%B8%AD%E7%A7%8B%E5%8F%8C%E8%8A%82%E5%BF%AB%E4%B9%90/10_1.jpg" class="" title="ChinaNationalDay">]]></content>
    
    
    <summary type="html">&lt;p&gt;拾月，你好！🤭🥧&lt;br&gt;国庆快乐🦆 o(&lt;em&gt;￣▽￣&lt;/em&gt;)ブ😊&lt;br&gt;又到了吃月饼的日子，月饼可好吃了！🍪&lt;br&gt;收集了一点十月的图片，新的一个月要元气满满🦆&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱语" scheme="https://blog.farmer233.top/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E8%AF%AD/"/>
    
    
    <category term="生活记录" scheme="https://blog.farmer233.top/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode刷题]第9题：回文数</title>
    <link href="https://blog.farmer233.top/2020/09/30/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC9%E9%A2%98%EF%BC%9A%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://blog.farmer233.top/2020/09/30/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC9%E9%A2%98%EF%BC%9A%E5%9B%9E%E6%96%87%E6%95%B0/</id>
    <published>2020-09-30T07:18:21.000Z</published>
    <updated>2020-09-30T08:19:52.867Z</updated>
    
    <content type="html"><![CDATA[<p>抓住九月的尾巴更新一下😮<br>明天就国庆了，抓紧9月的尾巴随便更新一下。=&gt; 真的就随便找道简单的题随便做做、随便更更、随便水水(不是×)</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><p>题干: </p><blockquote><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><p>Example1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>Example2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数</span><br></pre></td></tr></table></figure><p>Example3:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题目一看第一时间就想到将数字转换为字符串，然后通过字符串判断(老字符串玩家了🤭)<br>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。<br>但是，如果反转后的数字大于 <strong>整型最大范围</strong>，我们将遇到溢出问题。</p><h3 id="字符串玩法"><a href="#字符串玩法" class="headerlink" title="字符串玩法"></a>字符串玩法</h3><p>利用python的切片，能够快速的把字符串调转<br>因此代码十分的简洁(python真香)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> str(x) == str(x)[::<span class="number">-1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这里利用了三元表达式来判断，使代码看起来简洁许多(看不懂的才觉得牛逼√)</p><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>忙碌的9月开学季，许多琐碎的事情要处理来不及做自己的事。<br>十月新生也陆续开学了，大概可以稳定下来刷刷题、写写博客了趴😊🥧</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;抓住九月的尾巴更新一下😮&lt;br&gt;明天就国庆了，抓紧9月的尾巴随便更新一下。=&amp;gt; 真的就随便找道简单的题随便做做、随便更更、随便水水(不是×)&lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.farmer233.top/tags/leetcode/"/>
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于python基础语法概览</title>
    <link href="https://blog.farmer233.top/2020/08/16/%E5%85%B3%E4%BA%8Epython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%A6%82%E8%A7%88/"/>
    <id>https://blog.farmer233.top/2020/08/16/%E5%85%B3%E4%BA%8Epython%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%A6%82%E8%A7%88/</id>
    <published>2020-08-16T02:46:41.000Z</published>
    <updated>2020-09-01T07:44:04.154Z</updated>
    
    <content type="html"><![CDATA[<p>快开学了梳理下python的基础知识，个人感觉内容不算多😀<br>另外最近有人问我python应该如何入门，大概要学多久. emmmm我个人感觉一个星期就足够了。  </p><a id="more"></a><h2 id="python基础-基础"><a href="#python基础-基础" class="headerlink" title="python基础.基础"></a>python基础.基础</h2><p>这部分严格来讲算不上python的知识，应该是学编程的基础知识</p><ol><li>python是解释型语言</li><li>python官方用的是CPython解释器</li><li>python遵循pep8规范,当然你用自己的也行只要语法格式不错都行</li></ol><p>如果上述几个点你都弄明白了，那你应该能回答出下面的这个问题：<br><strong>python的运行速度为什么比C语言慢？</strong><br>如果你答不上来，那说明你还不太了解，应该回头把基础知识补一下。  </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型都大同小异，但python是动态语言定义前不需要声明数据类型  </p><h3 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1，100，-8080，0，</code>等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。<br>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：<br><code>&#39;I\&#39;m \&quot;OK\&quot;!&#39;</code> =&gt; <code>I&#39;m &quot;OK&quot;!</code><br>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code><br>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;xxxx&#39;&#39;&#39;</code>的格式表示多行内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里第一行(line1)是紧跟这'''后面的，如果另起一行则会有空行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure><h3 id="浮点型-float、double"><a href="#浮点型-float、double" class="headerlink" title="浮点型(float、double)"></a>浮点型(float、double)</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，<code>1.23x109</code>和<code>12.3x108</code>是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，<code>1.23x109</code>就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（<strong>请注意大小写</strong>）。</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用<code>None</code>表示。None不能理解为<code>0</code>，因为0是有意义的，而None是一个特殊的空值。</p><h3 id="更多扩展"><a href="#更多扩展" class="headerlink" title="更多扩展"></a>更多扩展</h3><p>因为本文是笔记所以更详细的就不一一写了，上面这部分的扩充知识会放在这个区域</p><ol><li>字符串和编码</li><li>布尔运算</li><li>None到底是什么</li><li>各个类型的强制转换</li><li>数据在计算机内部的样子</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><p>有学过C的小伙伴应该都听过数组，python的列表其实就是C的数组  </p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><p>用法:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>变量<code>classmates</code>就是一个list。用<code>len()</code>函数可以获得list元素的个数:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(classmates)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>和C语言相比，list里面的元素的数据类型也可以不同，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Apple'</span>, <span class="number">123</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>下面是一个套娃List(二维), 要注意嗷！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">'asp'</span>, <span class="string">'php'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">'python'</span>, <span class="string">'java'</span>, p, <span class="string">'scheme'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">2</span>]</span><br><span class="line">[<span class="string">'asp'</span>, <span class="string">'php'</span>]</span><br><span class="line"><span class="comment">#要拿到'php'可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</span></span><br></pre></td></tr></table></figure><h4 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h4><p>现在有了一个列表，那怎么读取列表里面的元素？</p><p><strong>列表的查询：</strong><br>通过下标查询(index) =&gt; index意为下标、索引</p><ul><li>正向查询 =&gt; classmates[1] -&gt; Bob</li><li>反向查询 =&gt; classmates[-2] -&gt; Bob</li></ul><p>同样的要想<strong>修改</strong>列表里面的元素，也是通过下标进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>向列表里面<strong>增加</strong>元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">'Adam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</span><br></pre></td></tr></table></figure><p>也可以把元素插入到指定的位置，比如<strong>索引号</strong>为<code>1</code>的位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</span><br></pre></td></tr></table></figure><p><strong>删除</strong>列表里面的元素:<br>要删除list末尾的元素，用<code>pop()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>要删除指定位置的元素，用<code>pop(i)</code>方法，其中i是索引位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">'Jack'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><h4 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h4><ol><li>用<code>del</code>的方法来删除列表元素</li><li><code>pop()</code>函数删除列表元素是，怎么接收这个弹出来的元素</li><li>列表的切片操作</li><li>列表反转、排序</li></ol><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><p>除了list另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：<br><code>&gt;&gt;&gt; classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code></p><p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。</p><p>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</p><p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>如果要定义一个空的tuple，可以写成<code>()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>但是，要定义一个只有1个元素的tuple，如果你这么定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。</p><p>所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。</p><p>最后来看一个“可变的”tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">'Y'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'X'</span>, <span class="string">'Y'</span>])</span><br></pre></td></tr></table></figure><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h3><p>oh！终于写到字典了，字典是一个很好用的东西。如果你学过web开发或者了解过前后端分离那你一定听说过json，JavaScript的对象表示法<br>言归正传，在python里面这种数据结构叫字典  </p><h4 id="字典初始化-amp-基础"><a href="#字典初始化-amp-基础" class="headerlink" title="字典初始化&amp;基础"></a>字典初始化&amp;基础</h4><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>]</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。</p><p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Michael'</span>]</span><br><span class="line"><span class="number">95</span></span><br></pre></td></tr></table></figure><p>字典的创建有很多方法，下面列举几种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Adam'</span>] = <span class="number">67</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'admin'</span>]</span><br><span class="line"><span class="number">67</span></span><br></pre></td></tr></table></figure><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Jack'</span>] = <span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Jack'</span>]</span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Jack'</span>] = <span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Jack'</span>]</span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>，如果key不存在，dict就会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp_dict[<span class="string">'Thomas'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'Thomas'</span></span><br></pre></td></tr></table></figure><p>要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>注意：返回None的时候Python的交互环境不显示结果。</strong></p><h4 id="字典删除"><a href="#字典删除" class="headerlink" title="字典删除"></a>字典删除</h4><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h4><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p><p>和list比较，dict有以下几个特点：</p><p>查找和插入的速度极快，不会随着key的增加而变慢；<br>需要占用大量的内存，内存浪费多。<br>而list相反：</p><p>查找和插入的时间随着元素的增加而增加；<br>占用空间小，浪费内存很少。<br>所以，dict是用空间来换取时间的一种方法。</p><h4 id="扩充-1"><a href="#扩充-1" class="headerlink" title="扩充"></a>扩充</h4><ol><li>字典这种数据结构是怎么实现快速查找的</li><li>哈希函数是什么</li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制在每门语言中都是基础的一部分<br>而python的流程控制有: </p><ol><li>for循环</li><li>while循环</li><li>if</li></ol><h3 id="if条件判断"><a href="#if条件判断" class="headerlink" title="if条件判断"></a>if条件判断</h3><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p><p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用if语句实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br></pre></td></tr></table></figure><p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行<code>print</code>语句执行了，否则，什么也不做。</p><p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果if判断是<code>False</code>，不要执行if的内容，去把<code>else</code>执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'your age is'</span>, age)</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br></pre></td></tr></table></figure><p>注意不要少写了冒号<code>:</code></p><p>当然上面的判断是很粗略的，完全可以用<code>elif</code>做更细致的判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ge = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环是python两种中的一种<br>for循环的语法格式是:<code>for x in xxx:</code>; 依次把list或tuple中的每个元素迭代出来，看例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br><span class="line"><span class="comment"># 执行这段代码，会依次打印names的每一个元素：</span></span><br><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure><p>所以<code>for x in ...</code>循环就是把每个元素代入变量x，然后执行缩进块的语句。<br>上面例子里面的<code>names</code>一般叫作迭代对象。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>python除了for循环，第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(sum)</span><br><span class="line"><span class="comment"># 在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。</span></span><br></pre></td></tr></table></figure><h3 id="扩充-2"><a href="#扩充-2" class="headerlink" title="扩充"></a>扩充</h3><ol><li><code>range()</code>函数</li><li><code>break</code>和<code>continue</code></li><li>python里面迭代对象是什么</li></ol><h2 id="函数-function"><a href="#函数-function" class="headerlink" title="函数(function)"></a>函数(function)</h2><p>什么是函数？ 数学里面的函数吗？ 抽象的讲确实是数学里面的函数，传入<code>自变量</code>得到<code>因变量</code>。但我们也可以把函数理解成积木块，把一些常用的代码块封装起来。方便使用的块块<br>或者可以把函数理解成接口，我们传递东西进去，它返回东西出来  </p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>我们之前用的<code>print</code>函数在屏幕上打印信息，比如打印<code>Hello World!</code>则要调用<code>print(&#39;Hello World!&#39;)</code>，所以函数的格式：<code>[函数名](&lt;传递参数&gt;)</code></p><h3 id="函数定义-初始化"><a href="#函数定义-初始化" class="headerlink" title="函数定义(初始化)"></a>函数定义(初始化)</h3><p>在python里面，函数是用<code>def</code>关键字来定义的，比如：<code>def my_function():</code><br>函数名其实也是变量名，因此函数名的定义规则和变量一样</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。<br><strong>一个简单的例子</strong> =&gt; 定义一个计算x^2的函数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">15</span>)</span><br><span class="line"><span class="number">225</span></span><br></pre></td></tr></table></figure><p>现在，如果我们要计算x3怎么办？可以再定义一个power3函数，但是如果要计算x4、x5……怎么办？我们不可能定义无限多个函数。</p><p>你也许想到了，可以把power(x)修改为power(x, n)，用来计算xn，说干就干：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">125</span></span><br></pre></td></tr></table></figure><p>新的power(x, n)函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用。</p><p>这个时候，<strong>默认参数</strong>就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p><strong>默认参数需要注意的点</strong>  观察下面这个函数，思考一下运行两次<code>add_end()</code>的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; add_end()</span></span><br><span class="line">['END', 'END']</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; add_end()</span></span><br><span class="line">['END', 'END', 'END']</span><br></pre></td></tr></table></figure><p>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p><p><strong>可变参数</strong><br>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p><p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>如果利用可变参数，调用函数的方式可以简化成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>关键字参数</strong> 可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure><p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p><p>举个例子，我们来计算阶乘<code>n! = 1 x 2 x 3 x ... x n</code>，用函数<code>fact(n)</code>表示，可以看出：</p><p>fact(n)=n!=1\times2\times3\times\cdot\cdot\cdot\times(n-1)\times n=(n-1)!\times n=fact(n-1)\times nfact(n)=n!=1×2×3×⋅⋅⋅×(n−1)×n=(n−1)!×n=fact(n−1)×n</p><p>所以，<code>fact(n)</code>可以表示为<code>n x fact(n-1)</code>，只有n=1时需要特殊处理。</p><p>于是，<code>fact(n)</code>用递归的方式写出来就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="扩充-3"><a href="#扩充-3" class="headerlink" title="扩充"></a>扩充</h3><ol><li>函数参数的传递过程(形参和实参的区别)</li><li>匿名函数</li><li>一元表达式</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述的这些既可以说是python的入门，也可以说是编程的入门。<br>还有更多的python的我把它们归类在python的高级特性范围，本文参考廖神的python入门后续请自己前往学习。<br>大概的梳理一下剩下的知识点，仅个人能想到的部分，更多更系统的大纲请看专业的教材</p><ol><li>面向对象</li><li>lamba函数</li><li>IO</li><li>进程和线程</li><li>正则</li><li>网络编程(socket)</li><li>高级特性-&gt;切片等等</li></ol><p>参考链接：<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰官网</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快开学了梳理下python的基础知识，个人感觉内容不算多😀&lt;br&gt;另外最近有人问我python应该如何入门，大概要学多久. emmmm我个人感觉一个星期就足够了。  &lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript变量提升和函数提升</title>
    <link href="https://blog.farmer233.top/2020/08/16/JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%92%8C%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
    <id>https://blog.farmer233.top/2020/08/16/JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E5%92%8C%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/</id>
    <published>2020-08-16T02:19:53.000Z</published>
    <updated>2020-08-27T06:48:45.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>解析器会先解析代码，然后把声明的变量的声明提升到最前，这就叫做变量提升。</p><p>定义其实包含了-&gt; 声明 + 赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="comment">// 上面这条代码其实包含了两个步骤，如下:</span></span><br><span class="line"><span class="keyword">var</span> web;</span><br><span class="line">web = <span class="string">'https://blog.farmer233.top'</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>var</code> 声明代码会被提升到前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以上代码解析器执行过程如下</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>下面是 <code>if(false)</code> 中定义的var也会发生变量提升，注释掉if 结果会不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> web = <span class="string">"https://blog.farmer233.top"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> web = <span class="string">"https://blog.farmer233.top"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(web);</span><br><span class="line">&#125;</span><br><span class="line">hd();</span><br></pre></td></tr></table></figure><p>使用 <code>var</code> 定义的代码，声明会被提升到前面，赋值还在原位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(blog);</span><br><span class="line"><span class="keyword">var</span> blog = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上代码解析器执行过程如下</span></span><br><span class="line"><span class="keyword">var</span> blog;</span><br><span class="line"><span class="built_in">console</span>.log(blog); <span class="comment">// https://blog.farmer233.top</span></span><br><span class="line">blog = <span class="string">'https://blog.farmer233.top'</span>;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>变量提升就是代码在预解析的时候将变量的声明提到程序的开头</li><li>通俗的讲就是将代码块内的变量都在开头先声明。</li></ol><p>变量提升会导致很多莫名其妙的bug，<strong>那么该如何避免变量提升</strong>？  </p><ul><li>为了解决这个问题，JavaScript后来推出了let和const</li><li>使用严格模式</li></ul><h2 id="TDZ"><a href="#TDZ" class="headerlink" title="TDZ"></a>TDZ</h2><p>TDZ 又称暂时性死区，指变量在作用域内已经存在，但必须在let/const声明后才可以使用。<br>TDZ可以让程序保持先声明后使用的习惯，让程序更稳定。</p><ul><li>变量要先声明后使用</li><li>所以我们应该使用let/const来定义变量, 少用var</li></ul><p>使用 <code>let/const</code> 声明的变量在声明前存在临时性死区（TDZ）使用会发生错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// Cannot access 'x' before initialization</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在run函数作用域中产生TDZ，不允许变量在未声明前使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blog = <span class="string">"https://blog.farmer233.top"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(blog);</span><br><span class="line">    <span class="keyword">let</span> blog = <span class="string">"farmer233"</span>;</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>下面代码b没有声明赋值不允许直接使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blog = <span class="string">"https://blog.farmer233.top"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(blog);</span><br><span class="line">    <span class="keyword">let</span> blog = <span class="string">"farmer233"</span>;</span><br><span class="line">&#125;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>多使用JavaScript的严格模式</li><li>由于JavaScript的历史遗留原因，很多老问题都被新版本修复了，因此我们应多使用新版本的工具。</li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>可能我上面的表达不太清楚，这几天在群里吹水解答沙雕群友的时候写了点小栗子也顺便贴上来吧。(随便写写.)<br>欢迎随便看看。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量提升是因为变量的定义会被浏览器先预览一次</span></span><br><span class="line"><span class="keyword">var</span> web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="keyword">var</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="comment">// 注意！class是JavaScript的语关键字</span></span><br><span class="line"><span class="comment">// 所以这里class作为变量名是不被允许的(会报错)</span></span><br><span class="line"><span class="comment">// 我们都知道代码是从上到下运行的，那么是不是会把变量web打印后再报错？ 答案是程序一运行就报错了</span></span><br><span class="line"><span class="comment">// 这是因此解析器会先预览一次变量的定义，在运行程序，上述代码可以写成下面这样</span></span><br><span class="line"><span class="keyword">var</span> web;</span><br><span class="line"><span class="keyword">var</span> <span class="class"><span class="keyword">class</span></span>;</span><br><span class="line">web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="class"><span class="keyword">class</span> </span>= <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="comment">// 这里变量的定义给提到上面去了，所以这就叫变量提升</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面同理</span></span><br><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="keyword">var</span> web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="comment">// 运行结果： undefined</span></span><br><span class="line"><span class="comment">// 程序并没有报错，这也是因为变量的声明提升到了前面，打印了一次后再给变量赋值。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面讲的都是顺序程序结构，那如果变量是在代码块内定义的会怎么样？ 其实一样会提升</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="comment">// 运行结果： undefined</span></span><br><span class="line"><span class="comment">// 很明显if内的代码是不会给执行的，但运行结果仍然没有报错。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 再探究一下</span></span><br><span class="line"><span class="keyword">var</span> web = <span class="string">'https://blog.farmer233.top'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(web); <span class="comment">// https://blog.farmer233.top</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.web); <span class="comment">// https://blog.farmer233.top</span></span><br><span class="line"><span class="comment">// 这里可以看到 web变量还可以作为全局对象window的属性。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量提升&quot;&gt;&lt;a href=&quot;#变量提升&quot; class=&quot;headerlink&quot; title=&quot;变量提升&quot;&gt;&lt;/a&gt;变量提升&lt;/h2&gt;&lt;p&gt;解析器会先解析代码，然后把声明的变量的声明提升到最前，这就叫做变量提升。&lt;/p&gt;
&lt;p&gt;定义其实包含了-&amp;gt; 声明 + </summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="前端" scheme="https://blog.farmer233.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.farmer233.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[TCP/IP]随便看看TCP/IP分层模型</title>
    <link href="https://blog.farmer233.top/2020/07/18/TCP-IP-%E9%9A%8F%E4%BE%BF%E7%9C%8B%E7%9C%8BTCP-IP%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
    <id>https://blog.farmer233.top/2020/07/18/TCP-IP-%E9%9A%8F%E4%BE%BF%E7%9C%8B%E7%9C%8BTCP-IP%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-07-18T06:09:16.000Z</published>
    <updated>2020-07-18T10:18:53.731Z</updated>
    
    <content type="html"><![CDATA[<p>本文不会讲过于基础的知识点，比如TCP/IP和OSI模型将不做过多介绍。  </p><p>持续更新中…</p><a id="more"></a><img src="/2020/07/18/TCP-IP-%E9%9A%8F%E4%BE%BF%E7%9C%8B%E7%9C%8BTCP-IP%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/pack.png" class="" title="pack"><p>在TCP/IP的分层中，都会对所发送的数据附加一个首部(包头)，这个首部包含了该层的信息，如目标地址等等。  </p><p>各层的数据单位：</p><ul><li>包(全能性术语)</li><li>帧，用来表示数据链路层中包的单位</li><li>数据报，网络层以上的分层中包的单位</li><li>段，表示TCP流中的信息</li><li>消息，指应用协议中的数据单位</li></ul><h2 id="数据包的处理"><a href="#数据包的处理" class="headerlink" title="数据包的处理"></a>数据包的处理</h2><ol><li>应用程序处理<ul><li>将应用数据编码后交给下一层</li></ul></li><li>TCP模块处理<ul><li>负责建立连接、发送数据以及断开连接。</li><li>首部中包括源端口号、目标端口号和序号等</li></ul></li><li>IP模块处理<ul><li>将TCP的首部和数据段当成IP的数据段，并添加IP首部</li><li>IP首部中还包含其携带的数据是属于TCP或是UDP</li></ul></li><li>以太网接口处理</li></ol><img src="/2020/07/18/TCP-IP-%E9%9A%8F%E4%BE%BF%E7%9C%8B%E7%9C%8BTCP-IP%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/tcp.png" class="" title="tcp">  <h2 id="以太网帧格式-Ethernet"><a href="#以太网帧格式-Ethernet" class="headerlink" title="以太网帧格式(Ethernet)"></a>以太网帧格式(Ethernet)</h2><p>以太网帧前端有一个前导码，它有0、1交替组合而成，表示一个以太网帧的开始<br>其中前导码末尾是一个叫做SFD的域，值位“11”，前导码和SFD合起来占8个字节。  </p><img src="/2020/07/18/TCP-IP-%E9%9A%8F%E4%BE%BF%E7%9C%8B%E7%9C%8BTCP-IP%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/ethernet.png" class="" title="ethernet"><p>– 个人感觉这里理解的还不透彻，错误地方欢迎指出 –</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>更新中，未完待续…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文不会讲过于基础的知识点，比如TCP/IP和OSI模型将不做过多介绍。  &lt;/p&gt;
&lt;p&gt;持续更新中…&lt;/p&gt;</summary>
    
    
    
    <category term="计算机网络" scheme="https://blog.farmer233.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机网络基础" scheme="https://blog.farmer233.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>记录-服务器搬迁史</title>
    <link href="https://blog.farmer233.top/2020/07/03/%E8%AE%B0%E5%BD%95-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E8%BF%81%E5%8F%B2/"/>
    <id>https://blog.farmer233.top/2020/07/03/%E8%AE%B0%E5%BD%95-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E8%BF%81%E5%8F%B2/</id>
    <published>2020-07-02T16:15:55.000Z</published>
    <updated>2020-07-15T09:09:17.396Z</updated>
    
    <content type="html"><![CDATA[<p>这几天考完试，重装了一手服务器。顺便记录一下有哪些服务器必备的软件及安装方法吧。<br>大概会涉及nginx、code-server、ftp以及smb等等安装。</p><a id="more"></a><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li>换源-将默认源改成国内源</li><li>安装必备软件-vim、git、nginx</li></ol><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>由于国内的网络问题，原生的问题大家都懂的。 我这里选择国内阿里云的源，原因无它只因一直都在用习惯了。<br>阿里云镜像站：<a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/</a><br>修改配置文件前要养成备份默认配置的习惯。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><h4 id="手动更改"><a href="#手动更改" class="headerlink" title="手动更改"></a>手动更改</h4><p>用你熟悉的编辑器打开：<br><code>/etc/apt/sources.list</code></p><p>替换默认的</p><p><code>http://archive.ubuntu.com/</code></p><p>为  </p><p><code>mirrors.aliyun.com</code></p><h4 id="懒人方法"><a href="#懒人方法" class="headerlink" title="懒人方法"></a>懒人方法</h4><p>直接替换全部内容,ubuntu 20.04(focal) 配置如下:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>安装软件前记得要先更新软件源 <code>sudo apt update</code><br>安装vim和git <code>sudo apt install vim git nginx-full</code><br>如果不喜欢用包管理器安装nginx，可以自行更换编译安装<br>具体安装方法可以去nginx官网上下载源码编译。</p><h2 id="FTP安装与配置"><a href="#FTP安装与配置" class="headerlink" title="FTP安装与配置"></a>FTP安装与配置</h2><p>先更新软件源<br><code>sudo apt update</code><br>安装ftp<br><code>sudo apt install vsftpd</code></p><p>ftp安装好后，配置文件会放在 <code>/etc/vsftpd.conf</code> ，利用自己熟悉的编辑器打开它。<br>找到并修改这几项配置  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"></span><br><span class="line">local_enable=YES</span><br><span class="line"></span><br><span class="line">write_enable=YES</span><br><span class="line"></span><br><span class="line">local_umask=022</span><br></pre></td></tr></table></figure><p>修改好后，重启ftp服务<br><code>sudo service vsftpd restart</code></p><h2 id="samba安装与配置"><a href="#samba安装与配置" class="headerlink" title="samba安装与配置"></a>samba安装与配置</h2><p>与前面的安装差不多<br><code>sudo apt install samba</code><br>ftp安装好后，配置文件会放在 <code>/etc/samba/smb.conf</code> ，<br>在配置文件后面添加以下配置：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">comment = share # 备注</span><br><span class="line">path = /home/admin/share/ # 映射路径</span><br><span class="line">public = no</span><br><span class="line">writable = yes</span><br></pre></td></tr></table></figure><p>添加smb用户，注意这里的用户必须先要在系统中存在<br><code>sudo smbpasswd -a admin</code></p><p>重启smb服务<br><code>sudo service smbd restart</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天考完试，重装了一手服务器。顺便记录一下有哪些服务器必备的软件及安装方法吧。&lt;br&gt;大概会涉及nginx、code-server、ftp以及smb等等安装。&lt;/p&gt;</summary>
    
    
    
    <category term="胡思乱语" scheme="https://blog.farmer233.top/categories/%E8%83%A1%E6%80%9D%E4%B9%B1%E8%AF%AD/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://blog.farmer233.top/tags/Linux/"/>
    
    <category term="nginx" scheme="https://blog.farmer233.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>[PTA刷题]浙大版python题目集</title>
    <link href="https://blog.farmer233.top/2020/06/25/PTA%E5%88%B7%E9%A2%98-%E6%B5%99%E5%A4%A7%E7%89%88python%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    <id>https://blog.farmer233.top/2020/06/25/PTA%E5%88%B7%E9%A2%98-%E6%B5%99%E5%A4%A7%E7%89%88python%E9%A2%98%E7%9B%AE%E9%9B%86/</id>
    <published>2020-06-25T08:22:31.000Z</published>
    <updated>2020-06-27T04:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>刷了一个月的PTA,昨晚终于把最后一题刷完了 👏👏👏<br>刚刚好刷了一个月，临近期末还特别忙。上两周课表爆炸，上周开始实训周，肝了两天把实训项目弄完了~！！！😀<br>我的PTA题目集：<a href="https://github.com/Farmer-chong/pta" target="_blank" rel="noopener">https://github.com/Farmer-chong/pta</a><br>我把整套题的答题集都放在了GitHub上面，有些题目还存在许多问题，欢迎各位大佬提issue，提pr来解答！</p><img src="/2020/06/25/PTA%E5%88%B7%E9%A2%98-%E6%B5%99%E5%A4%A7%E7%89%88python%E9%A2%98%E7%9B%AE%E9%9B%86/rank.png" class="" title="my_rank"><!--  --><h2 id="刷题心得"><a href="#刷题心得" class="headerlink" title="刷题心得"></a>刷题心得</h2><p>这套题挺简单的，对算法、数据结构等知识储备要求不多。主要是拿来熟悉python的语法。 如果当初当作练习来刷显然没把这套题充分利用起来。 因此我在刷的时候当成了算法题来刷，运行时间空间尽可能得压缩。<br>刷完题的感觉就是：对python的理解又深了一层(对python的依赖更深了/(ㄒoㄒ)/~~)</p><h2 id="题目记录"><a href="#题目记录" class="headerlink" title="题目记录"></a>题目记录</h2><p>这是记录我在刷题过程中，映像深刻的题目。</p><h3 id="编程题部分"><a href="#编程题部分" class="headerlink" title="编程题部分"></a>编程题部分</h3><h4 id="第5章-7-列表去重-40分"><a href="#第5章-7-列表去重-40分" class="headerlink" title="第5章-7 列表去重 (40分)"></a>第5章-7 列表去重 (40分)</h4><p>输入一个列表，去掉列表中重复的数字，按原来次序输出！</p><table><thead><tr><th align="center">输入格式</th><th align="center">输出格式</th><th align="center">输入例子</th><th align="center">输出例子</th></tr></thead><tbody><tr><td align="center">在一行中输入列表</td><td align="center">在一行中输出不重复列表元素</td><td align="center"><code>[4,7,5,6,8,6,9,5]</code></td><td align="center"><code>4 7 5 6 8 9</code></td></tr></tbody></table><h5 id="code"><a href="#code" class="headerlink" title="code:"></a>code:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_str = eval(input())</span><br><span class="line">temp = list(set(input_str))</span><br><span class="line">temp.sort(key = input_str.index)</span><br><span class="line">print(<span class="string">' '</span>.join(list(map(str, temp))))</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这题主要是因为用到了 <code>eval</code> 函数的另一种用法：转换数据类型</p><h4 id="第6章-5-列表元素个数的加权和-1-40分"><a href="#第6章-5-列表元素个数的加权和-1-40分" class="headerlink" title="第6章-5 列表元素个数的加权和(1) (40分)"></a>第6章-5 列表元素个数的加权和(1) (40分)</h4><p>输入一个嵌套列表，嵌套层次不限，根据层次，求列表元素的加权个数和。第一层每个元素算一个元素，第二层每个元素算2个元素，第三层每个元素算3个元素，第四层每个元素算4个元素,…,以此类推！</p><table><thead><tr><th align="center">输入格式</th><th align="center">输出格式</th><th align="center">输入例子</th><th align="center">输出例子</th></tr></thead><tbody><tr><td align="center">在一行中输入列表</td><td align="center">在一行中输出加权元素个数值</td><td align="center"><code>[1,2,[3,4,[5,6],7],8]</code></td><td align="center"><code>15</code></td></tr></tbody></table><h5 id="code-1"><a href="#code-1" class="headerlink" title="code:"></a>code:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">temp_str = eval(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis</span><span class="params">(weigh, target_list)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> target_list:</span><br><span class="line">        <span class="keyword">if</span> type(key) == list:</span><br><span class="line">            temp = analysis(weigh + <span class="number">1</span>,key)</span><br><span class="line">            res += temp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += weigh</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(analysis(<span class="number">1</span>, temp_str))</span><br></pre></td></tr></table></figure><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>这题用到了递归，加深了对递归的了解</p><h3 id="函数题部分"><a href="#函数题部分" class="headerlink" title="函数题部分"></a>函数题部分</h3><h4 id="第6章函数-5-使用函数求余弦函数的近似值-20分"><a href="#第6章函数-5-使用函数求余弦函数的近似值-20分" class="headerlink" title="第6章函数-5 使用函数求余弦函数的近似值 (20分)"></a>第6章函数-5 使用函数求余弦函数的近似值 (20分)</h4><p>本题要求实现一个函数，用下列公式求cos(x)近似值，精确到最后一项的绝对值小于eps（绝对值小于eps的项不要加）：<br>cos (x) = x^0 / 0! - x^2 / 2! + x^4 / 4! - x^6 / 6! + ?<br>函数接口定义：funcos(eps,x ),其中用户传入的参数为eps和x；函数funcos应返回用给定公式计算出来，保留小数4位。</p><h5 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数接口:</span><br><span class="line">funcos(eps,x ),返回cos(x)的值。</span><br></pre></td></tr></table></figure><h5 id="裁判测试程序样例"><a href="#裁判测试程序样例" class="headerlink" title="裁判测试程序样例"></a>裁判测试程序样例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在这里给出函数被调用进行测试的例子。例如：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 请在这里填写答案 */</span><br><span class="line"></span><br><span class="line">eps=float(input())</span><br><span class="line">x=float(input())</span><br><span class="line">value=funcos(eps,x )</span><br><span class="line">print("cos(&#123;0&#125;) = &#123;1:.4f&#125;".format(x,value))</span><br></pre></td></tr></table></figure><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.0001</span><br><span class="line">-3.1</span><br></pre></td></tr></table></figure><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cos(-3.1) = -0.9991</span><br></pre></td></tr></table></figure><h5 id="code-2"><a href="#code-2" class="headerlink" title="code:"></a>code:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcos</span><span class="params">(eps, x)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    temp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (x ** n / factorial(n)) &gt;= eps:</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">0</span>, n, <span class="number">2</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> key % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            res += x ** key / factorial(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res -= x ** key / factorial(key)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(x)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">2</span>, int(x)+<span class="number">1</span>):</span><br><span class="line">        res *= key</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>这题是参考别人答案做的一道题，我原本把for循环部分嵌入到了while循环里面，但测试的时候第二组测试样例没有通过，想了很久都没想出来哪里出了问题。会的大佬如果看到了，麻烦提个issue告知我一下，我的题目集都存在GitHub上面了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刷了一个月的PTA,昨晚终于把最后一题刷完了 👏👏👏&lt;br&gt;刚刚好刷了一个月，临近期末还特别忙。上两周课表爆炸，上周开始实训周，肝了两天把实训项目弄完了~！！！😀&lt;br&gt;我的PTA题目集：&lt;a href=&quot;https://github.com/Farmer-chon</summary>
      
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
    <category term="PTA" scheme="https://blog.farmer233.top/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode刷题]第七题: 整数反转</title>
    <link href="https://blog.farmer233.top/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>https://blog.farmer233.top/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</id>
    <published>2020-05-22T13:00:42.000Z</published>
    <updated>2020-05-26T06:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <img src="/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/main_1.jpg" class="" title="main"> --><p>本文涉及：数学原理进行出栈操作、python切片反转字符串、取模运算以及求模的原理<br>最近跑去刷了一下pat，感觉挺适合作为学校课程的同步练习食用。<br>不管多忙，leetcode还是不过鸽的！(真香？-？)  </p><a id="more"></a><h2 id="题目：整数反转"><a href="#题目：整数反转" class="headerlink" title="题目：整数反转"></a>题目：整数反转</h2><p>题干：</p><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br><strong>注意</strong>:<br>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote><p>Example1:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure><p>Example2:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure><p>Example3:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h3><p>我拿到题目后，第一反应是利用堆栈。利用<code>pop</code>把元素逐个弹出并添加到新的数组中，然后转换类型。<br><strong>需要注意</strong> 的是题目中给定了数值的范围，因此我们需要进行判断。<br>现在看回来，真是种呆逼的写法啊~  我就不过多解释了(no eyes to see)，照例还是贴个代码吧：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        temp_str  = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        target = <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">        str_len = len(str(x)) <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> (len(str(x)) <span class="number">-1</span>)</span><br><span class="line">        x = list(str(x))</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> range(str_len): </span><br><span class="line">            temp_str += x.pop()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (int(temp_str) * target) <span class="keyword">if</span> <span class="number">-2</span>**<span class="number">31</span> &lt;= int(temp_str) &lt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>每次写都知道自己写的是不够完美的，在写的时候我突然记起python有切片操作，不是比这样子更方便吗！</p><h3 id="利用切片的优化解法"><a href="#利用切片的优化解法" class="headerlink" title="利用切片的优化解法"></a>利用切片的优化解法</h3><p>python的切片功能能快速的操作字符串，这里的原理和上面的大致相同，不过减少了更多的操作。<br>大致思路就是把int类型转换成string类型，然后用切片将字符串反转。这里需要注意负数的情况！！！然后把字符串转换回去。<br>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 当 x &lt; 0 时，反转字符串并去掉尾巴的负号，并在头部加上</span></span><br><span class="line">        x = str(x)[::<span class="number">-1</span>] <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">"-"</span> + str(x)[::<span class="number">-1</span>][:<span class="number">-1</span>]</span><br><span class="line">        x = int(x) <span class="keyword">if</span> <span class="number">-2</span>**<span class="number">31</span> &lt;= int(x) &lt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>这是我自己能想到的最优解法了，但结果仍然不太理想。</p><h3 id="官方解法"><a href="#官方解法" class="headerlink" title="官方解法"></a>官方解法</h3><p>看完官方答案后，我总结了可以优化的点：</p><ol><li>出栈操作可以通过数学知识来简化</li><li>并不需要转换类型</li><li>取值范围的判断</li></ol><h4 id="出栈操作思路"><a href="#出栈操作思路" class="headerlink" title="出栈操作思路"></a>出栈操作思路</h4><p>算法：<br>反转整数的方法可以与反转字符串进行类比。<br>我们想重复“弹出” x 的最后一位数字，并将它“推入”到 res 的后面。最后，res 将与 x 相反。<br>要在没有辅助堆栈 / 数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//pop operation:</span><br><span class="line">pop = x % 10; # 弹出最后一个数字</span><br><span class="line">x /= 10;</span><br><span class="line"></span><br><span class="line">//push operation:</span><br><span class="line">temp = res * 10 + pop;</span><br><span class="line">res = temp;</span><br></pre></td></tr></table></figure><p>用图片来理解:</p><img src="/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/main_1.jpg" class="" title="main"><h4 id="取值范围判断思路"><a href="#取值范围判断思路" class="headerlink" title="取值范围判断思路"></a>取值范围判断思路</h4><p>解决了堆栈的操作后，就剩下取值范围要解决了。<br>我们知道取值范围是：<code>[−2^31,  2^31 − 1]</code>. 也就是说它小于<code>2147483647</code>，大于<code>214748364</code><br>假设有<code>1147483649</code>这个数字，它是小于最大的32位整数的，但是将这个数字反转过来后就变成了<code>9463847411</code>，这就比最大的32位整数还要大了，这样的数字是没法存到int里面的，所以肯定要返回0(溢出了)。</p><img src="/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/limit.jpg" class="" title="limit"><p>上图中，绿色的是最大32位整数<br>第二排数字中，橘子的是5，它是大于上面同位置的4，这就意味着5后跟任何数字，都会比最大32为整数都大。<br>所以，我们到【最大数的1/10】时，就要开始判断了<br>如果某个数字大于 214748364那后面就不用再判断了，肯定溢出了。<br>如果某个数字等于 214748364呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的末尾数字比较，如果这个数字比7还大，说明溢出了。<br><strong>负数同理</strong></p><p>这里需要注意！python是向下取整的，也就是说python的取模运算是不准确的。举个栗子：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">12</span> % <span class="number">10</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">-12</span> % <span class="number">10</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>可以看到，python的模运算中，负数部分与我们预想的是不一致的。<br>通过了解，取模与取余是不一样的！ 非常amazing啊！ 我也是第一次听到，经过了解取模运算的数学表达是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> D = x 对 y 取模</span></span><br><span class="line">D = x - ( x / y) * y</span><br></pre></td></tr></table></figure><p>因此由于python是向下取整，所以我们要进行正负判断！  </p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        target = <span class="number">-1</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        x *= target</span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span> :</span><br><span class="line">            pop = x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span> </span><br><span class="line">            <span class="keyword">if</span>( res &gt; <span class="number">214748364</span>  <span class="keyword">or</span> (res == <span class="number">214748364</span>  <span class="keyword">and</span> pop &gt; <span class="number">7</span>)):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span>( res &lt; <span class="number">-214748364</span>  <span class="keyword">or</span> (res == <span class="number">-214748364</span>  <span class="keyword">and</span> pop &lt; <span class="number">-8</span>)):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = res * <span class="number">10</span> + pop</span><br><span class="line">        <span class="keyword">return</span> res * target</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>找到了知识漏洞：python是向下取整的！</li><li>明白了取模的数学原理</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>LeetCode: <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p>]]></content>
    
    
    <summary type="html">&lt;!-- &lt;img src=&quot;/2020/05/22/Leetcode%E5%88%B7%E9%A2%98-%E7%AC%AC%E4%B8%83%E9%A2%98-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/main_1.jpg&quot; class=&quot;&quot; title=&quot;main&quot;&gt; --&gt;
&lt;p&gt;本文涉及：数学原理进行出栈操作、python切片反转字符串、取模运算以及求模的原理&lt;br&gt;最近跑去刷了一下pat，感觉挺适合作为学校课程的同步练习食用。&lt;br&gt;不管多忙，leetcode还是不过鸽的！(真香？-？)  &lt;/p&gt;</summary>
    
    
    
    <category term="学了些什么" scheme="https://blog.farmer233.top/categories/%E5%AD%A6%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="笔记" scheme="https://blog.farmer233.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题" scheme="https://blog.farmer233.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="leetcode" scheme="https://blog.farmer233.top/tags/leetcode/"/>
    
    <category term="python" scheme="https://blog.farmer233.top/tags/python/"/>
    
  </entry>
  
</feed>
